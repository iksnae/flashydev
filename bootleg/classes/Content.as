/** * 	Content Class: this set of methods an vars loads, parses and stores the content in loacal arrays so that they may * 	be accessed by the Shell Class... Any additional content sources added to this project will be handled here. *  *  */import com.util.Proxy;import com.util.XMLUtilities;class Content {	private var PagesXML:XML;	private var JokesXML:XML;	private var ArtistsXML:XML;	private var NewsXML:XML;	private var ShowsXML:XML;	private var MediaXML:XML;	private var RootShell:MovieClip;	private var PagesXMLURL:String = 'data/pages.xml';	private var MediaXMLURL:String = 'data/media.php';	private var ShowsXMLURL:String = 'data/shows.php';	private var JokesXMLURL:String = 'data/getjokes.php';	private var ArtistsXMLURL:String = 'data/artists.xml';	private var NewsXMLURL:String = 'data/news.php';	private var CommentsXMLURL:String = 'data/getcomments.php';	private var Pages:Array;	private var Artists:Array;	private var Jokes:Array;	private var News:Array;	private var Media:Array;	private var Shows:Array;	function Content() {		trace('Content:initiated');		RootShell = _root.shell;		init();	}	private function init() {				PagesXML = new XML();		PagesXML.ignoreWhite = true;		JokesXML = new XML();		JokesXML.ignoreWhite = true;		ArtistsXML = new XML();		ArtistsXML.ignoreWhite = true;		NewsXML = new XML();		NewsXML.ignoreWhite = true;		ShowsXML = new XML();		ShowsXML.ignoreWhite = true;		MediaXML = new XML();		MediaXML.ignoreWhite = true;				Jokes = new Array();		News = new Array();		Pages = new Array();		Artists = new Array();		Media = new Array();		Shows = new Array();				PagesXML.onLoad = Proxy.create(this, PagesXMLLoaded);		JokesXML.onLoad = Proxy.create(this, JokesXMLLoaded);		ArtistsXML.onLoad = Proxy.create(this, ArtistsXMLLoaded);		NewsXML.onLoad = Proxy.create(this, NewsXMLLoaded);		ShowsXML.onLoad = Proxy.create(this, ShowsXMLLoaded);		MediaXML.onLoad = Proxy.create(this, MediaXMLLoaded);				loadContent();	}	private function loadContent() {		PagesXML.load(PagesXMLURL);		JokesXML.load(JokesXMLURL);		ArtistsXML.load(ArtistsXMLURL);		NewsXML.load(NewsXMLURL);		ShowsXML.load(ShowsXMLURL);		MediaXML.load(MediaXMLURL);	}	private function PagesXMLLoaded(success) {		if (success) {			trace('PagesXML Loaded');			var tmparr1 = XMLUtilities.getElementsByTagName(PagesXML.firstChild, 'page');			for (var i = 0; i<tmparr1.length; i++) {				var tmparr2 = [XMLUtilities.reqAttr(tmparr1[i], 'id'), XMLUtilities.reqAttr(tmparr1[i], 'url')];				Pages.push(tmparr2);			}		} else {			trace('PagesXML Failed to Load');		}	}	private function NewsXMLLoaded(success) {		if (success) {			trace('NewsXML Loaded');			var tmparr1 = XMLUtilities.getElementsByTagName(NewsXML.firstChild, 'record');			for (var i = 0; i<tmparr1.length; i++) {				var header = XMLUtilities.getValueByTagName(tmparr1[i], 'header');				var body = XMLUtilities.getValueByTagName(tmparr1[i], 'body');				var link = XMLUtilities.getValueByTagName(tmparr1[i], 'link');				var image = XMLUtilities.getValueByTagName(tmparr1[i], 'image');				var date_added = XMLUtilities.getValueByTagName(tmparr1[i], 'date_added');				var tmparr2 = [XMLUtilities.getValueByTagName(tmparr1[i], 'title'), XMLUtilities.getValueByTagName(tmparr1[i], 'joke')];				//trace('NEWS: '+header+'  \rLINK: '+link+'  \rDATE: '+date_added+'\rDESCRIPTION:\r'+body);				var obj = new Object({title:header, link:link, description:body, image:image, pubDate:date_added});				News.push(obj);			}			RootShell.NewsArray = News;		} else {			trace('PagesXML Failed to Load');		}	}	private function JokesXMLLoaded(success) {		if (success) {			trace('JokesXML Loaded');			var tmparr1 = XMLUtilities.getElementsByTagName(JokesXML.firstChild, 'record');			for (var i = 0; i<tmparr1.length; i++) {				var tmparr2 = [XMLUtilities.getValueByTagName(tmparr1[i], 'title'), XMLUtilities.getValueByTagName(tmparr1[i], 'joke')];				Jokes.push(tmparr2);			}			RootShell.JokesArray = Jokes;		} else {			trace('JokesXML Failed to Load');		}	}	private function MediaXMLLoaded(success) {		if (success) {			trace('MediaXML Loaded');			var tmparr1 = XMLUtilities.getElementsByTagName(MediaXML.firstChild, 'record');			//trace(tmparr1);			for (var i = 0; i<tmparr1.length; i++) {				//trace('Title: '+XMLUtilities.getValueByTagName(tmparr1[i], 'title'));				//trace('Joke: '+XMLUtilities.getValueByTagName(tmparr1[i], 'joke'));				var tmparr2 = [XMLUtilities.getValueByTagName(tmparr1[i], 'header'), XMLUtilities.getValueByTagName(tmparr1[i], 'body'), XMLUtilities.getValueByTagName(tmparr1[i], 'date_added'), XMLUtilities.getValueByTagName(tmparr1[i], 'url'), XMLUtilities.getValueByTagName(tmparr1[i], 'type')];				Media.push(tmparr2);			}			RootShell.MediaArray = Media;		} else {			trace('MediaXML Failed to Load');		}	}	/////------------	private function ShowsXMLLoaded(success) {		if (success) {			trace('ShowsXML Loaded');			var tmparr1 = XMLUtilities.getElementsByTagName(ShowsXML.firstChild, 'record');			for (var i = 0; i<tmparr1.length; i++) {				var tmparr2 = [XMLUtilities.getValueByTagName(tmparr1[i], 'header'), XMLUtilities.getValueByTagName(tmparr1[i], 'body'), XMLUtilities.getValueByTagName(tmparr1[i], 'dates'), XMLUtilities.getValueByTagName(tmparr1[i], 'image')];				Shows.push(tmparr2);			}			RootShell.ShowsArray = Shows;		} else {			trace('ShowsXML Failed to Load');		}	}	private function ArtistsXMLLoaded(success) {		if (success) {			trace('ArtistsXML Loaded');			var tmparr1 = XMLUtilities.getElementsByTagName(ArtistsXML.firstChild, 'artist');			//trace('tmparr1: '+tmparr1)			for (var i = 0; i<tmparr1.length; i++) {				var tmparr2 = [XMLUtilities.reqAttr(tmparr1[i], 'id'), XMLUtilities.reqAttr(tmparr1[i], 'subtitle'), XMLUtilities.reqAttr(tmparr1[i], 'thumb')];				//trace(tmparr2)				Artists.push(tmparr2);			}		} else {			trace('ArtistsXML Failed to Load');		}	}	public function GetPages():Array {		//trace(Pages);		//trace(Pages.length);		return Pages;	}	public function GetProfile():Array {		var arr:Array = new Array();		return arr;	}	public function GetArtists():Array {		return Artists;	}	public function GetJokes():Array {		return Jokes;	}	public function GetNews():Array {		return News;	}}