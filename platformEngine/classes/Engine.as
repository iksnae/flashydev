import flash.display.*;import flash.events.*;import flash.text.*;import flash.utils.getTimer;import Hero;import Enemy;class Engine extends Sprite {	/* LOCAL VARS */	// Numbers	var GRAVITY:Number=.004;	var edgeDistance:Number=100;	var playerLives:Number;	var lastTime:Number;	// ints	var gameScore:int;	// MovieClips	var GAME_LEVEL:MovieClip;	// Arrays	var enemies:Array;	var fixeditems:Array;	var otheritems:Array;	// Strings	var gameMode:String;	var CLASS_NAME:String='Engine';	// Objects	var HeroObj:Hero;	/* CONSTRUCTOR */	function Engine() {		trace(CLASS_NAME + ': Engine: Constructor');		init();	}	/* PRIVATE METHODS*/	private function init() {		trace(CLASS_NAME + ': init');	}	private function createHero() {		HeroObj=new Hero(GAME_LEVEL.hero);	}	/* KEYBOARDING METHODS */	private function keyDownFunction(event:KeyboardEvent) {		if (gameMode != "play") {			return;		}// don't move until in play mode		if (event.keyCode == 37) {			HeroObj.moveLeft=true;		} else if (event.keyCode == 39) {			HeroObj.moveRight=true;		} else if (event.keyCode == 32) {			if (! HeroObj.inAir) {				HeroObj.jump=true;			}		}	}	private function keyUpFunction(event:KeyboardEvent) {		if (event.keyCode == 37) {			HeroObj.moveLeft=false;		} else if (event.keyCode == 39) {			HeroObj.moveRight=false;		}	}	private function gameLoop() {		// get time differentce		if (lastTime == 0) {			lastTime=getTimer();		}		var timeDiff:int=getTimer() - lastTime;		lastTime+= timeDiff;		// only perform tasks if in play mode		if (gameMode == "play") {			moveCharacter(hero,timeDiff);			moveEnemies(timeDiff);			checkCollisions();			scrollWithHero();		}	}	private function examineLevel() {		var currentLevel=GAME_LEVEL;		fixedObjects=new Array  ;		otherObjects=new Array  ;		for (var i:int=0; i < GAME_LEVEL.numChildren; i++) {			var mc=GAME_LEVEL.getChildAt(i);			// add floors and walls to fixedObjects			if (mc is Floor || mc is Wall) {				var floorObject:Object=new Object  ;				floorObject.mc=mc;				floorObject.leftside=mc.x;				floorObject.rightside=mc.x + mc.width;				floorObject.topside=mc.y;				floorObject.bottomside=mc.y + mc.height;				fixedObjects.push(floorObject);				// add treasure, key and door to otherOjects			} else if (mc is Treasure || mc is Key || mc is Door || mc is Chest) {				otherObjects.push(mc);			}		}	}	private function moveCharacter(char:Object,timeDiff:Number) {		if (timeDiff < 1) {			return;		}		// assume character pulled down by gravity		var verticalChange:Number=char.dy * timeDiff + timeDiff * gravity;		if (verticalChange > 15.0) {			verticalChange=15.0;		}		char.dy+= timeDiff * gravity;		// react to changes from key presses		var horizontalChange=0;		var newAnimState:String="stand";		var newDirection:int=char.direction;		if (char.moveLeft) {			// walk left			horizontalChange=- char.walkSpeed * timeDiff;			newAnimState="walk";			newDirection=-1;		} else if (char.moveRight) {			// walk right			horizontalChange=char.walkSpeed * timeDiff;			newAnimState="walk";			newDirection=1;		}		if (char.jump) {			// start jump			char.jump=false;			char.dy=- char.jumpSpeed;			verticalChange=- char.jumpSpeed;			newAnimState="jump";		}		// assume no wall hit, and hanging in air		char.hitWallRight=false;		char.hitWallLeft=false;		char.inAir=true;		// find new vertical position		var newY:Number=char.mc.y + verticalChange;		// loop through all fixed objects to see if character has landed		for (var i:int=0; i < fixedObjects.length; i++) {			if (char.mc.x + char.width / 2 > fixedObjects[i].leftside && char.mc.x - char.width / 2 < fixedObjects[i].rightside) {				if (char.mc.y <= fixedObjects[i].topside && newY > fixedObjects[i].topside) {					newY=fixedObjects[i].topside;					char.dy=0;					char.inAir=false;					break;				}			}		}		// find new horizontal position		var newX:Number=char.mc.x + horizontalChange;		// loop through all objects to see if character has bumped into a wall		for (i=0; i < fixedObjects.length; i++) {			if (newY > fixedObjects[i].topside && newY - char.height < fixedObjects[i].bottomside) {				if (char.mc.x - char.width / 2 >= fixedObjects[i].rightside && newX - char.width / 2 <= fixedObjects[i].rightside) {					newX=fixedObjects[i].rightside + char.width / 2;					char.hitWallLeft=true;					break;				}				if (char.mc.x + char.width / 2 <= fixedObjects[i].leftside && newX + char.width / 2 >= fixedObjects[i].leftside) {					newX=fixedObjects[i].leftside - char.width / 2;					char.hitWallRight=true;					break;				}			}		}		// set position of character		char.mc.x=newX;		char.mc.y=newY;		// set animation state		if (char.inAir) {			newAnimState="jump";		}		char.animstate=newAnimState;		// move along walk cycle		if (char.animstate == "walk") {			char.animstep+= timeDiff / 60;			if (char.animstep > char.walkAnimation.length) {				char.animstep=0;			}			char.mc.gotoAndStop(char.walkAnimation[Math.floor(char.animstep)]);			// not walking, show stand or jump state		} else {			char.mc.gotoAndStop(char.animstate);		}		// changed directions		if (newDirection != char.direction) {			char.direction=newDirection;			char.mc.scaleX=char.direction;		}	}	private function checkColissions() {	}	private function moveEnemies() {		for (var i:int=0; i < enemies.length; i++) {			// move			moveCharacter(enemies[i],timeDiff);			// if hit a wall, turn around			if (enemies[i].hitWallRight) {				enemies[i].moveLeft=true;				enemies[i].moveRight=false;			} else if (enemies[i].hitWallLeft) {				enemies[i].moveLeft=false;				enemies[i].moveRight=true;			}		}	}	private function checkOthers() {	}	private function addScore(numPoints:Number) {		gameScore+= numPoints;		scoreDisplay.text=String(gameScore);	}	private function addEnemies() {		enemies=new Array  ;		var i:int=1;		while (true) {			if (gamelevel["enemy" + i] == null) {				break;			}			var enemy=new Enemy  ;			enemy.mc=GAME_LEVEL["enemy" + i];			enemies.push(enemy);			i++;		}	}	private function scrollWithHero() {		var stagePosition:Number=gamelevel.x + hero.mc.x;		var rightEdge:Number=stage.stageWidth - edgeDistance;		var leftEdge:Number=edgeDistance;		if (stagePosition > rightEdge) {			gamelevel.x-= stagePosition - rightEdge;			if (gamelevel.x < - gamelevel.width - stage.stageWidth) {				gamelevel.x=- gamelevel.width - stage.stageWidth;			}		}		if (stagePosition < leftEdge) {			gamelevel.x+= leftEdge - stagePosition;			if (gamelevel.x > 0) {				gamelevel.x=0;			}		}	}	private function showLives() {		livesDisplay.text=String(playerLives);	}	private function levelComplete() {		gameMode="done";		var dialog:Dialog=new Dialog  ;		dialog.x=175;		dialog.y=100;		addChild(dialog);		dialog.message.text="Level Complete!";	}	private function getObject() {		// award points for treasure		if (otherObjects[objectNum] is Treasure) {			var pb:PointBurst=new PointBurst(gamelevel,100,otherObjects[objectNum].x,otherObjects[objectNum].y);			gamelevel.removeChild(otherObjects[objectNum]);			otherObjects.splice(objectNum,1);			addScore(100);			// got the key, add to inventory		} else if (otherObjects[objectNum] is Key) {			pb=new PointBurst(gamelevel,"Got Key!",otherObjects[objectNum].x,otherObjects[objectNum].y);			playerObjects.push("Key");			gamelevel.removeChild(otherObjects[objectNum]);			otherObjects.splice(objectNum,1);			// hit the door, end level if hero has the key		} else if (otherObjects[objectNum] is Door) {			if (playerObjects.indexOf("Key") == -1) {				return;			}			if (otherObjects[objectNum].currentFrame == 1) {				otherObjects[objectNum].gotoAndPlay("open");				levelComplete();			}			// got the chest, game won		} else if (otherObjects[objectNum] is Chest) {			otherObjects[objectNum].gotoAndStop("open");			gameComplete();		}	}	private function cleanUp() {		removeChild(GAME_LEVEL);		this.removeEventListener(Event.ENTER_FRAME,gameLoop);		stage.removeEventListener(KeyboardEvent.KEY_DOWN,keyDownFunction);		stage.removeEventListener(KeyboardEvent.KEY_UP,keyUpFunction);	}	private function setGameLevel(MC:MovieClip) {		GAME_LEVEL=MC;		examineLevel();	}	/* PUBLIC METHODS */	public function startGame(game_level_mc:MovieClip) {		createHero();		addEnemies();		setGameLevel(gamelevel_mc);		this.addEventListener(Event.ENTER_FRAME,gameLoop);		this.addEventListener(KeyboardEvent.KEY_DOWN,keyDownFunction);		this.addEventListener(KeyboardEvent.KEY_UP,keyUpFunction);		gameMode='play';		addScore(0);		showLives();	}}