package ReflectionLinkAPI.Controller {	import flash.display.*;	import flash.events.*;	import fl.transitions.Tween;	import fl.transitions.TweenEvent;	import flash.utils.*;		import ReflectionLinkAPI.View.*;	import ReflectionLinkAPI.Events.*;		/** * @author andrehines */public class LinkControllerAbstract extends MovieClip {		internal var __theView:LinkView;	internal var __origTween:Tween;	internal var __reflectionTween:Tween;		protected var __titleFont:String;	protected var __title:String;	protected var __titleFontSize:uint;	protected var __descriptionFont:String;	protected var __theDecoratee:LinkControllerAbstract;	protected var __description:String;	protected var __descriptionFontSize:uint;	protected var __subSections:Array;	protected var __subSectionsClips:Array;	protected var __spacing:int = 0;	protected var __reflectionObj:Object;	protected var __subSectionsRevealed:Boolean = false;	protected var __animationEnabled:Boolean = true;	protected var __currentSectionIndex:int;		function LinkControllerAbstract(theDecoratee:LinkControllerAbstract = null){		trace("LinkControllerAbstract class instantiated");					if(theDecoratee != null){			__theDecoratee = theDecoratee;		}else{			trace("WARNING: No decorator passed to: " + getQualifiedClassName(this));		}	}		// pre populates model with info	protected function prePopulateModel(theSubSections:Array, theTitle:String, theTitleFont:String, theTitleFontSize:uint, theDescription:String, theDescriptionFont:String, theDescriptionFontSize:uint):void{	}		//sets up listeners	protected function setupListeners():void{	}		//retrieves the info from the model and loads that particular section in	protected function getSection(sectionIndex:uint = 0):void{	}		// forces a link to be clicked	public function forceClick(targetIndex:uint):void{	}		// reveals Title	public function revealTitle():void{	}		// removes loaded image and reflects it	public function removeTitle():void{	}		// reveals Description	public function revealDescription():void{	}		// reveals sub sections	public function revealSubSections():void{	}		// removes sub sections	public function removeSubSections():void{	}		// resets the reflection	public function resetReflection():void{	}		// disables Mouse handling events	public function disableMouse(theBool:Boolean):void{	}			///////////////////////////////////// EVENTS ///////////////////////////////////////////////////		// EVENT handles when the controller is added to the stage	public function onAddedToStage(eventObj:Event):void{	}		// EVENT handles when the link is ready	public function onLinkReady(eventObj:LinkEvent):void{	}		// EVENT handles when the reveal title is finished	public function onRevealTitleFinished(eventObj:TweenEvent):void{	}		// EVENT handles when the remove title is finished	public function onRemoveTitleFinished(eventObj:TweenEvent):void{	}		// EVENT broadcasts that the view has been rolled over	public function onRolledOver(eventObj:LinkEvent):void{	}		// EVENT broadcasts that the view has been rolled over	public function onRolledOut(eventObj:LinkEvent):void{	}		//handles when a section link is clicked	public function onLinkClicked(eventObj:LinkEvent):void{	}		//handles when a section link is clicked	public function onSubLinkClicked(eventObj:LinkEvent):void{	}		// EVENT handles when the remove subSection is finished	public function onRemoveSubSectionsFinished(eventObj:Object):void{	}		// EVENT handles when the reveal description starts	public function onRevealTitleStop(eventObj:TweenEvent):void{	}				////////////////////////// getters and setters //////////////////////////////////////////		public function get titleFontSize():uint{		return this.__titleFontSize		}		public function get title():String{		return this.__title;		}		public function get titleFont():String{		return this.__titleFont;		}		public function get descriptionFontSize():uint{		return this.__descriptionFontSize		}		public function get description():String{		return this.__description;		}		public function get descriptionFont():String{		return this.__descriptionFont;		}		public function get spacing():int{		return this.__spacing;		}		public function set reflectionObj(theObj:Object):void{		this.__reflectionObj = theObj;		}		public function get reflectionObj():Object{		return this.__reflectionObj;	}		public function get subSections():Array{		return this.__subSections;		}		public function set subSectionsRevealed(theBool:Boolean):void{		this.__subSectionsRevealed = theBool;		}		public function get subSectionsRevealed():Boolean{		return this.__subSectionsRevealed;		}		public function set animationEnabled(theBool:Boolean):void{		this.__animationEnabled = theBool;		}		public function get animationEnabled():Boolean{		return this.__animationEnabled;		}		public function set subSectionsClips(theArray:Array):void{		this.__subSectionsClips = theArray;	}		public function get subSectionsClips():Array{		return this.__subSectionsClips;		}		public function set reflectionVisible(theBool:Boolean):void{		this.reflectionObj.reflection.visible = theBool;		}		public function get reflectionVisible():Boolean{		return this.reflectionObj.reflection.visible;		}		public function get theView():LinkViewAbstract{		return this.__theView;	}		public function set currentSectionIndex(theInt:int):void{		this.__currentSectionIndex = theInt;		}		public function get currentSectionIndex():int{		return this.__currentSectionIndex;		}}}