package ReflectionLinkAPI.View {import ReflectionLinkAPI.View.LinkViewAbstract;import ReflectionLinkAPI.Events.*;	import flash.utils.*;import flash.display.*;import flash.text.*;import flash.events.*;import fl.transitions.*;import fl.transitions.easing.*;import ReflectionAPI.Reflection;		/** * @author andrehines */public class LinkView extends LinkViewAbstract {	function LinkView(){		trace("LinkView class instantiated");	}		override public function setup():void{		trace("setup function called on: " + getQualifiedClassName(this));				setupListeners();		setupText();		setupButtonHandling();	}		//sets up the listening for the view	override protected function setupListeners():void{		trace("setupListeners function called on: " + getQualifiedClassName(this));						}		//sets up text	override protected function setupText():void{		trace("setupText function called on: " + getQualifiedClassName(this));					//create the container		this.__theContainer = new MovieClip();				//create the title and add to container		var theTitle:MovieClip = createTitle();		this.__theContainer.addChild(theTitle);				//create the description and add to container		var theDescription:MovieClip = createDescription();		theDescription.y = TextField(theTitle.theTB).textHeight - 4;		this.__theContainer.addChild(theDescription);				//first create a button hit area		var theHitBMD:BitmapData = new BitmapData(this.__theContainer.width, this.__theContainer.height, true, 0x00FF0000);		var theHitBMP:Bitmap = new Bitmap(theHitBMD);		this.__hitMC = new MovieClip();		this.__hitMC.sectionTitle = theTitle.theTB.text;		this.__hitMC.addChild(theHitBMP);				this.__theContainer.addChild(this.__hitMC);				//add the y coordinates, so we know which coordinate separates the text boxes		this.__endTitleY = TextField(theTitle.theTB).textHeight;		this.__endDescriptionY = theDescription.y;				//finally add whole group to view		this.addChild(this.__theContainer);				//now reflect the container		this.__reflectionObj = Reflection.reflect(this.__theContainer, [0, .35], [100, 255], this.__theModel.spacing, 1, 1);				//call the function to reset Reflection		resetReflection();				//call function to set up subSections		setupSubSections();				//finally broadcast that the Link is ready		onLinkReady();	}		// resets the reflection	override public function resetReflection():void{		trace("resetReflection function called on: " + getQualifiedClassName(this));				//now set the reflection and original to be underneath their masks, so they are not visible at first				this.__reflectionObj.original.y = this.__reflectionObj.originalOrigY + this.__reflectionObj.original.height;		this.__reflectionObj.reflection.y = this.__reflectionObj.reflectionOrigY - this.__reflectionObj.reflection.height;		}		// sets up buttonHandling	override protected function setupButtonHandling():void{		trace("setupButtonHandling function called on: " + getQualifiedClassName(this));				this.__hitMC.buttonMode = true;				this.__hitMC.addEventListener(MouseEvent.ROLL_OVER, onRolledOver);		this.__hitMC.addEventListener(MouseEvent.ROLL_OUT, onRolledOut);		this.__hitMC.addEventListener(MouseEvent.CLICK, onLinkClicked);	}		//creates a title with a textbox inside it	override protected function createTitle():MovieClip{		trace("createTitle function called on: " + getQualifiedClassName(this));				var linkMC:MovieClip = new MovieClip();		var linkTB:TextField = new TextField();		linkTB.embedFonts = true;		linkTB.autoSize = TextFieldAutoSize.LEFT;		linkTB.selectable = false;		linkTB.mouseEnabled = false;		linkMC.theTB = linkTB;				//format TextField		var theFormat:TextFormat = new TextFormat();		theFormat.font = this.__theModel.titleFont;		theFormat.color = 0x818384;		theFormat.size = this.__theModel.titleFontSize;		theFormat.letterSpacing = 10;				//set the format		linkTB.defaultTextFormat = theFormat;				linkMC.addChild(linkTB);				//set the text		linkTB.text = this.__theModel.title;				return linkMC;	}			//creates a description with a textbox inside it	override protected function createDescription():MovieClip{		trace("createDescription function called on: " + getQualifiedClassName(this));				var linkMC:MovieClip = new MovieClip();		var linkTB:TextField = new TextField();		linkTB.embedFonts = true;		linkTB.autoSize = TextFieldAutoSize.LEFT;		linkTB.selectable = false;		linkTB.mouseEnabled = false;		linkMC.theTB = linkTB;				//format TextField		var theFormat:TextFormat = new TextFormat();		theFormat.font = this.__theModel.descriptionFont;		theFormat.color = 0x818384;		theFormat.size = this.__theModel.descriptionFontSize;		theFormat.letterSpacing = 1;				//set the format		linkTB.defaultTextFormat = theFormat;				linkMC.addChild(linkTB);				//set the text		linkTB.text = this.__theModel.description;				return linkMC;	}				// sets up subSections	override protected function setupSubSections():void{		trace("setupSubSections function called on: " + getQualifiedClassName(this));				var startingY:int = -this.__endTitleY;		var subSectionsClips:Array = new Array();				for(var i in this.__theModel.subSections){			var subSectionObj:Object = this.__theModel.subSections[i];			var subSection:MovieClip = createSubSection(subSectionObj.subSectionTitle);			var subSectionContainer:MovieClip = new MovieClip();			subSection.subSectionType = subSectionObj.subSectionType;			subSection.subSectionIndex = subSectionObj.subSectionIndex;						//also put a reference to the subsection in the subSections array on the model			subSectionObj.subSectionContainer = subSectionContainer;			subSectionObj.subSection = subSection;						//also create a Transition Manager object for each sub section			subSectionContainer.addChild(subSection);			subSectionContainer.theTM = new TransitionManager(subSection);						//set coordinates			subSectionContainer.y = startingY;						//add to display			this.__theContainer.addChild(subSectionContainer);						subSectionsClips.push(subSection);						//register for button handling			subSection.buttonMode = true;						subSection.addEventListener(MouseEvent.ROLL_OVER, onSubRolledOver);			subSection.addEventListener(MouseEvent.ROLL_OUT, onSubRolledOut);			subSection.addEventListener(MouseEvent.CLICK, onSubLinkClicked);						startingY -= subSection.height;		}				//make sure the Model knows of the subsections		this.__theModel.subSectionsClips = subSectionsClips;	}		//creates a sub section with a textbox inside it	override protected function createSubSection(subSectionTitle:String):MovieClip{		trace("createSubSection function called on: " + getQualifiedClassName(this));				var linkMC:MovieClip = new MovieClip();		var linkTB:TextField = new TextField();		linkTB.embedFonts = true;		linkTB.autoSize = TextFieldAutoSize.LEFT;		linkTB.selectable = false;		linkTB.mouseEnabled = false;		linkMC.theTB = linkTB;				//format TextField		var theFormat:TextFormat = new TextFormat();		theFormat.font = this.__theModel.descriptionFont;		theFormat.color = 0x818384;		theFormat.size = 16;		theFormat.letterSpacing = 4;				//set the format		linkTB.defaultTextFormat = theFormat;				linkMC.addChild(linkTB);				//set the text		linkTB.text = subSectionTitle;				return linkMC;	}			//////////////////////////////// EVENTS ///////////////////////////////////////////////////////		// EVENT broadcast that the link is ready for action	override public function onLinkReady():void{		trace("onLinkReady function called on: " + getQualifiedClassName(this));				dispatchEvent(new LinkEvent(LinkEvent.LINK_READY, false));	}		// handles when a section link is clicked	override public function onLinkClicked(eventObj:MouseEvent):void{		trace("onLinkClicked event caught on: " + getQualifiedClassName(this));		dispatchEvent(new LinkEvent(LinkEvent.SECTION_CLICKED, false, false, eventObj.currentTarget.subSectionType, eventObj.currentTarget.subSectionIndex, eventObj.currentTarget.sectionTitle));	}		// EVENT broadcasts that the view has been rolled over	override public function onRolledOver(eventObj:MouseEvent):void{		trace("onRolledOver event caught on: " + getQualifiedClassName(this));				dispatchEvent(new LinkEvent(LinkEvent.ROLLED_OVER, false, false, eventObj.currentTarget.subSectionType, eventObj.currentTarget.subSectionIndex, eventObj.currentTarget.sectionTitle));	}		// EVENT broadcasts that the view has been rolled over	override public function onRolledOut(eventObj:MouseEvent):void{		trace("onRolledOut event caught on: " + getQualifiedClassName(this));				dispatchEvent(new LinkEvent(LinkEvent.ROLLED_OUT, false, false, eventObj.currentTarget.subSectionType, eventObj.currentTarget.subSectionIndex, eventObj.currentTarget.sectionTitle));	}		// EVENT handles when a  sub section link is rolled over	override public function onSubRolledOver(eventObj:MouseEvent):void{		trace("onSubRolledOver event caught on: " + getQualifiedClassName(this));	}		// EVENT handles when a  sub section link is rolled out	override public function onSubRolledOut(eventObj:MouseEvent):void{		trace("onSubRolledOut event caught on: " + getQualifiedClassName(this));	}		// EVENT handles when a  sub section link is clicked	override public function onSubLinkClicked(eventObj:MouseEvent):void{		trace("onSubLinkClicked event caught on: " + getQualifiedClassName(this));				dispatchEvent(new LinkEvent(LinkEvent.SUB_CLICKED, false, false, eventObj.currentTarget.subSectionType, eventObj.currentTarget.subSectionIndex, eventObj.currentTarget.sectionTitle));	}	}}