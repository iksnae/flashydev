package ReflectionLinkAPI.Decorators {	import flash.events.*;	import flash.utils.*;	import flash.display.*;	import flash.text.*;		import ReflectionLinkAPI.Decorators.*;	import ReflectionLinkAPI.View.*;	import ReflectionLinkAPI.Events.*;	import ReflectionLinkAPI.Controller.LinkControllerAbstract;		/** * @author andrehines */public class WLinkDecorator extends DecoratorAbstract {			public function WLinkDecorator(theDecoratee:LinkControllerAbstract = null) {		trace("WGalleryDecorator class instantiated");				super(theDecoratee);				setupButtonHandling();	}			//sets up the button handling	private function setupButtonHandling():void{		trace("setupButtonHandling function called on: " + getQualifiedClassName(this));		trace("__theDecoratee: " + this.__theDecoratee);			for(var i in this.__theDecoratee.subSectionsClips){			var subSection:MovieClip = this.__theDecoratee.subSectionsClips[i];						//first remove event handling			subSection.removeEventListener(MouseEvent.ROLL_OVER, this.__theDecoratee.theView.onSubRolledOver);			subSection.removeEventListener(MouseEvent.ROLL_OUT, this.__theDecoratee.theView.onSubRolledOut);			subSection.removeEventListener(MouseEvent.CLICK, this.__theDecoratee.theView.onSubLinkClicked);						//now add new event handling			subSection.buttonMode = true;						subSection.addEventListener(MouseEvent.ROLL_OVER, onSubRolledOver);			subSection.addEventListener(MouseEvent.ROLL_OUT, onSubRolledOut);			subSection.addEventListener(MouseEvent.CLICK, onViewSubLinkClicked);		}	}		// clears all links to up state	protected function clearLinks():void{		trace("clearLinks function called on: " + getQualifiedClassName(this));				//clear all links by call the onLinkRolledOut event			for(var i in this.__theDecoratee.subSectionsClips){				//format TextField				var theFormat:TextFormat = new TextFormat();				theFormat.color = 0x818384;								TextField(this.__theDecoratee.subSectionsClips[i].theTB).setTextFormat(theFormat);			}	}					///////////////////////////////// EVENTS ///////////////////////////////////////////////////////			// EVENT handles when a  sub section link is rolled over	public function onSubRolledOver(eventObj:MouseEvent):void{		trace("onSubRolledOver event caught on: " + getQualifiedClassName(this));				//determine if we are already on this section, if not, then allow the click		if(this.__theDecoratee.currentSectionIndex == eventObj.currentTarget.subSectionIndex){		//do nothing		}else{			//format TextField			var theFormat:TextFormat = new TextFormat();			theFormat.color = 0xFFFFFF;						TextField(eventObj.currentTarget.theTB).setTextFormat(theFormat);		}	}		// EVENT handles when a  sub section link is rolled out	public function onSubRolledOut(eventObj:MouseEvent):void{		trace("onSubRolledOut event caught on: " + getQualifiedClassName(this));				//determine if we are already on this section, if not, then allow the click		if(this.__theDecoratee.currentSectionIndex == eventObj.currentTarget.subSectionIndex){			//do nothing		}else{			//format TextField			var theFormat:TextFormat = new TextFormat();			theFormat.color = 0x818384;						TextField(eventObj.currentTarget.theTB).setTextFormat(theFormat);		}	}		// EVENT handles when a  sub section link is clicked	public function onViewSubLinkClicked(eventObj:MouseEvent):void{		trace("onSubLinkClicked event caught on: " + getQualifiedClassName(this));				//first clear links		clearLinks();				//format TextField		var theFormat:TextFormat = new TextFormat();		theFormat.color = 0xEC2828;				TextField(eventObj.currentTarget.theTB).setTextFormat(theFormat);				this.__theDecoratee.currentSectionIndex = eventObj.currentTarget.subSectionIndex;				dispatchEvent(new LinkEvent(LinkEvent.SUB_CLICKED, false, false, eventObj.currentTarget.subSectionType, eventObj.currentTarget.subSectionIndex, eventObj.currentTarget.sectionTitle));	}				/////////////////////////////////////// getter and setters///////////////////////////////////////////	}}