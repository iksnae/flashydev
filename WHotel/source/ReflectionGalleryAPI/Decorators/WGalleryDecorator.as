package ReflectionGalleryAPI.Decorators {	import flash.events.*;	import flash.utils.*;	import flash.display.*;	import flash.text.*;		import ReflectionGalleryAPI.Decorators.*;	import ReflectionGalleryAPI.View.*;	import ReflectionGalleryAPI.Events.*;		import events.*;		/** * @author andrehines */public class WGalleryDecorator extends DecoratorViewAbstract {			public function WGalleryDecorator(theDecoratee:GalleryViewAbstract = null) {		trace("WGalleryDecorator class instantiated");				super(theDecoratee);				setupButtonHandling();	}			//sets up the button handling for a SectionAbstract Object	private function setupButtonHandling():void{		trace("setupButtonHandling function called on: " + getQualifiedClassName(this));		//remove the listeners				//put back on the new listers		for(var i in this.__theDecoratee.theModel.links){			var theLink:MovieClip = this.__theDecoratee.theModel.links[i];						//turn on hand cursor			theLink.theTB.mouseEnabled = false;			theLink.buttonMode = true;									theLink.addEventListener(MouseEvent.ROLL_OVER, onLinkRolledOver, false);			theLink.addEventListener(MouseEvent.ROLL_OUT, onLinkRolledOut, false);						//remove old			theLink.removeEventListener(MouseEvent.CLICK, this.__theDecoratee.onLinkClicked, false);						//add new			theLink.addEventListener(MouseEvent.CLICK, onLinkClicked)								}	}		// clears all links to up state	override protected function clearLinks():void{		//clear all links by call the onLinkRolledOut event			for(var i in this.__theDecoratee.theModel.links){				onLinkRolledOut({currentTarget:this.__theDecoratee.theModel.links[i]});			}	}				///////////////////////////////// EVENTS ///////////////////////////////////////////////////////	// handles when a link is rolled over	override public function onLinkRolledOver(eventObj:MouseEvent):void{		trace("onLinkRolledOver event caught on: " + getQualifiedClassName(this));				if(!(this.__theDecoratee.theModel.currentSectionIndex == eventObj.currentTarget.index)){			var currentFormat:TextFormat = TextField(eventObj.currentTarget.theTB).getTextFormat();			currentFormat.color = 0xFFFFFF;						//apply new format			TextField(eventObj.currentTarget.theTB).setTextFormat(currentFormat);					}	}		override public function onLinkRolledOut(eventObj:Object):void{		trace("onLinkRolledOut event caught on: " + getQualifiedClassName(this));				if(!(this.__theDecoratee.theModel.currentSectionIndex == eventObj.currentTarget.index)){			var currentFormat:TextFormat = TextField(eventObj.currentTarget.theTB).getTextFormat();			currentFormat.color = 0x818384;						//apply new format			TextField(eventObj.currentTarget.theTB).setTextFormat(currentFormat);		}	}		// handles when a section link is clicked	override public function onLinkClicked(eventObj:MouseEvent):void{		trace("onLinkClicked event caught on: " + getQualifiedClassName(this));			//determine if we are already on this section, if not, then allow the click		if(this.__theDecoratee.theModel.currentSectionIndex == eventObj.currentTarget.index && this.__theDecoratee.theModel.currentSectionType == eventObj.currentTarget.sectionType){		//do nothing		}else if(!this.__theDecoratee.theModel.sectionChanging){			this.__theDecoratee.dispatchEvent(new ViewEvent(ViewEvent.SECTION_CHANGED, false, false, MovieClip(eventObj.currentTarget)));						clearLinks();						//apply selected color			var currentFormat:TextFormat = TextField(eventObj.currentTarget.theTB).getTextFormat();			currentFormat.color = 0xEC2828;						//apply new format			TextField(eventObj.currentTarget.theTB).setTextFormat(currentFormat);		}	}				/////////////////////////////////////// getter and setters///////////////////////////////////////////	}}