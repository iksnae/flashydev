package ShellAPI.Controller {	import flash.display.MovieClip;	import flash.net.URLRequest;	import flash.display.Loader;	import flash.events.*;		import fl.transitions.Tween;		import ShellAPI.Model.*;	import ShellAPI.View.*;	import ShellAPI.Behaviors.XMLBehaviorAbstract;	import ShellAPI.Factories.XMLSimpleFactory;		import events.XMLEvent;		/** * @author andrehines */public class ShellControllerAbstract extends MovieClip {		internal var __theModel:ShellModel;    internal var __theView:ShellView;	internal var __theXMLBehavior:XMLBehaviorAbstract;	internal var __theXMLFactory:XMLSimpleFactory;	internal var __theURLRequest:URLRequest;	internal var __theLoader:Loader;	internal var __loadAnimationMC:MovieClip;		protected var __loadTweenAlpha:Tween;	protected var __loadTweenY:Tween;	protected var __loadStartingX:int;	protected var __loadStartingY:int;		public var placeHolderMC:MovieClip		//[Inspectable(name="1. Target XML Behavior Type", defaultValue="CollegeFestXML", type=String)]    protected var __targetXMLType:String = "WHotelXML";    //[Inspectable(name="2. Target XML URL", defaultValue="navigation.xml", type=String)]    protected var __targetXMLURL:String = "shell.xml";    //[Inspectable(name="3. Target Decorator Type", defaultValue="TradeBlazerDecorator", type=String)]    protected var __decoratorType:String = "SawIVDecorator";		function ShellControllerAbstract(){		trace("ShellControllerAbstract class instantiated");				this.placeHolderMC.visible = false;		}		// sets up the load animation MovieClip	protected function setupLoadAnimation():void{	}		//sets up listeners	protected function setupListeners():void{	}		//retrieves the info from the model and loads that particular section in	public function getSection(sectionType:String = "Carousel", sectionIndex:uint = 0):void{	}		// removes the section	public function removeSection():Boolean{		return true;	}		// removes loadingAnimationMC	public function removeLoadAnimation():void{	}		// reveals loadingAnimationMC	public function revealLoadAnimation():void{	}		// broadcasts that a section type has changed	public function onSectionTypeChanged():void{	}		///////////////////////////////////// EVENTS ///////////////////////////////////////////////////		//handles setting up the view when our XML info is loaded and packaged	public function onPackagedInfo(eventObj:XMLEvent):void{	}		// EVENT handles making the loading animation visible whenever loading starts	public function onLoadStart(eventObj:Event):void{	}		// EVENT handles making the loading animation invisible whenever loading completes	public function onLoadComplete(eventObj:Event):void{	}		// EVENT handles calling the currentPercentage function on the loading animation MovieClip	public function onLoadProgress(eventObj:ProgressEvent):void{	}				////////////////////////// getters and setters //////////////////////////////////////////		public function set loadAnimationMC(theMC:MovieClip):void{		this.__loadAnimationMC = theMC;					//setup load animation MovieClip    	setupLoadAnimation();	}		public function get currentLoader():Loader{		return this.__theModel.currentLoader;		}		public function set currentSectionType(theStr:String):void{		this.__theModel.currentSectionType = theStr;		}}}