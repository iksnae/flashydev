package {	import flash.display.*;import flash.events.*;import flash.utils.*;import fl.transitions.Tween;import fl.transitions.TweenEvent;import fl.transitions.easing.*;	import events.XMLEvent;	import ShellAPI.Controller.ShellController;import ShellAPI.Events.*;	import ReflectionLinkAPI.Controller.LinkController;import ReflectionLinkAPI.Events.*;import ReflectionLinkAPI.Decorators.*;	import ReflectionAPI.Reflection;		/** * @author andrehines */public class WHotelMain extends MovieClip{		public var shellController:ShellController;	public var TopNav:MovieClip;	public var loadingAnimationMC:MovieClip;	public var link1:LinkController;	public var link2:LinkController;	public var link3:LinkController;	public var link1Decorated:WLinkDecorator;	public var link2Decorated:WLinkDecorator;	public var link3Decorated:WLinkDecorator;	public var introMC:MovieClip;	public var screenerMC:MovieClip;		private var __indulgeInterval:Number;	private var __discoverInterval:Number;	private var __sectionAreaX:int = 50;	private var __sectionAreaY:int = 300;	private var __link1MinimizedX:int = 50;	private var __link1MinimizedY:int = 480;	private var __link2MinimizedX:int = 50;	private var __link2MinimizedY:int = 500;	private var __link3MinimizedX:int = 50;	private var __link3MinimizedY:int = 520;	private var __links:Array;	private var __theTweenX:Tween;	private var __theTweenY:Tween;	private var __theTweenScaleX:Tween;	private var __theTweenScaleY:Tween;	private var __screenerTweenY:Tween;	private var __screenerTweenAlpha:Tween;	private var __reflectionObj:Object;	private var __currentSection:LinkController;	private var __nextSection:DisplayObject;		function WHotelMain(){		trace("WHotelMain class instantiated on: " + this);				this.addEventListener(Event.ADDED_TO_STAGE, onAddedToStage);		this.loaderInfo.addEventListener(Event.INIT, onInit);        this.loaderInfo.addEventListener(Event.COMPLETE, onComplete);        this.loaderInfo.addEventListener(ProgressEvent.PROGRESS, onProgress);				stop();	}		private function setupStage():void{		this.stage.scaleMode = StageScaleMode.NO_SCALE;				this.screenerMC.alpha = 0;		this.screenerMC.mouseEnabled = false;	}		private function setupListeners():void{		trace("setupListeners function called: " + this);				//make sure we are listenenig for events from the controller		this.shellController.addEventListener(XMLEvent.PACKAGED_INFO, onPackagedInfo);		this.shellController.addEventListener(Event.COMPLETE, onShellComplete);		this.shellController.addEventListener(ShellEvent.SECTION_TYPE_CHANGED, onSectionTypeChanged);	}		private function setupReflectionLinks():void{		trace("setupReflectionLinks function called on: " + this);				this.link1 = new LinkController([{subSectionType:"Main", subSectionTitle:"THE FLOORPLANS", subSectionIndex:0},											   {subSectionType:"Main", subSectionTitle:"THE RESIDENCES", subSectionIndex:1},											   {subSectionType:"Main", subSectionTitle:"W NEW YORK DOWNTOWN", subSectionIndex:2}],											  "EXPLORE     ", "Gill Sans Std", 32, "THE RESIDENCES");		link1.x = 410;		link1.y = 410;				this.addChildAt(this.link1, this.getChildIndex(screenerMC));		link1.disableMouse(true);		this.__links = new Array();		this.__links.push(link1);				this.link1.addEventListener(LinkEvent.SECTION_CLICKED, onSectionClicked);						//setup the interval for the indulge reflection link		this.__indulgeInterval = setInterval(setupIndulgeLink, 500);	}		private function setupIndulgeLink():void{		trace("setupIndulgeLink function called on: " + this);				clearInterval(this.__indulgeInterval);				this.link2 = new LinkController([{subSectionType:"Main", subSectionTitle:" ", subSectionIndex:3}],											  "INDULGE", "Gill Sans Std", 32, "IN THE AMENITIES");		link2.x = 230;		link2.y = 350;		link2.scaleX = link2.scaleY = .9;				this.addChildAt(this.link2, this.getChildIndex(this.screenerMC));		link2.disableMouse(true);		this.__links.push(link2);				this.link2.addEventListener(LinkEvent.SECTION_CLICKED, onSectionClicked);		this.link2.addEventListener(LinkEvent.SUB_CLICKED, onSubClicked);				//setup the interval for the indulge reflection link		this.__discoverInterval = setInterval(setupDiscoverLink, 500);	}		private function setupDiscoverLink():void{		trace("setupDiscoverLink function called on: " + this);				clearInterval(this.__discoverInterval);				this.link3 = new LinkController([{subSectionType:"Main", subSectionTitle:" ", subSectionIndex:4}],											  "DISCOVER", "Gill Sans Std", 32, "DOWNTOWN NYC");		link3.x = 50;		link3.y = 290;		link3.scaleX = link3.scaleY = .8;				this.addChildAt(this.link3, this.getChildIndex(this.screenerMC));		link1.disableMouse(false);		link2.disableMouse(false);		this.__links.push(link3);				this.link3.addEventListener(LinkEvent.SECTION_CLICKED, onSectionClicked);		this.link3.addEventListener(LinkEvent.SUB_CLICKED, onSubClicked);	}		//returns to the home page state	public function returnHome():void{		trace("returnHome function called on: " + getQualifiedClassName(this));					//remove the sub sections		this.__theTweenX.removeEventListener(TweenEvent.MOTION_FINISH, onSectionSet, false);		this.__currentSection.removeSubSections();				//remove the section on the shell		if(this.shellController.removeSection()){			//figure out which index this link is so that we can get its minimized coordinates			for(var i in this.__links){				if(this.__links[i] == this.__currentSection) {					tweenToHome(this.__currentSection, this["__link" + (i+1) + "MinimizedX"], this["__link" + (i+1) + "MinimizedY"]);				}			}		}					}		private function tweenToSectionArea(targetDO:DisplayObject):void{		trace("tweenToSectionArea function called on: " + this);				//first make the reflection visible again		LinkController(targetDO).reflectionVisible = true;				//tween the section to the section area		this.__theTweenX = new Tween(targetDO, "x", Strong.easeInOut, targetDO.x, this.__sectionAreaX, 1.8, true);		this.__theTweenY = new Tween(targetDO, "y", Strong.easeInOut, targetDO.y, this.__sectionAreaY, 1.8, true);		this.__theTweenScaleX = new Tween(targetDO, "scaleX", Strong.easeInOut, targetDO.scaleX, .8, 1.8, true);		this.__theTweenScaleY = new Tween(targetDO, "scaleY", Strong.easeInOut, targetDO.scaleY, .8, 1.8, true);				this.__theTweenX.addEventListener(TweenEvent.MOTION_FINISH, onSectionSet, false);	}		private function tweenToHome(targetDO:DisplayObject, targetX:int, targetY:int):void{		trace("tweenToHome function called on: " + this);				//tween the section to the section area		this.__theTweenX = new Tween(targetDO, "x", Strong.easeInOut, targetDO.x, targetX, 1.8, true);		this.__theTweenY = new Tween(targetDO, "y", Strong.easeInOut, targetDO.y, targetY, 1.8, true);		this.__theTweenScaleX = new Tween(targetDO, "scaleX", Strong.easeInOut, targetDO.scaleX, .35, 1.8, true);		this.__theTweenScaleY = new Tween(targetDO, "scaleY", Strong.easeInOut, targetDO.scaleY, .35, 1.8, true);				this.__theTweenX.addEventListener(TweenEvent.MOTION_FINISH, onReturnedHome, false);	}		public function resetPage():void{		trace("resetPage function called on: " + this);					//remove screener if there		removeScreener();				if(this.__currentSection != null){			//remove all links			for(var i in this.__links){				this.removeChild(this.__links[i]);				this.__links[i] = null;			}						//remove any loaded sections			this.shellController.removeSection();						//make sure the current section and links array is set to null			this.__currentSection = null;			this.__links = null;						//re setup links			setupReflectionLinks();		}	}		//reveals the screener	private function revealScreener():void{		trace("revealScreener function called on: " + this);				this.screenerMC.mouseEnabled = true;				if(this.__screenerTweenY == null){			this.__screenerTweenY = new Tween(this.screenerMC, "y", Strong.easeOut, this.screenerMC.y, 0, 1, true);				this.__screenerTweenAlpha = new Tween(this.screenerMC, "alpha", Strong.easeOut, this.screenerMC.alpha, .8, 1, true);		}else{			this.__screenerTweenY.continueTo(0, 1);			this.__screenerTweenAlpha.continueTo(.8, 1);		}		}		//removes the screener	public function removeScreener():void{		trace("removeScreener function called on: " + this);				this.screenerMC.mouseEnabled = false;				if(this.__screenerTweenY == null){			this.__screenerTweenY = new Tween(this.screenerMC, "y", Strong.easeOut, this.screenerMC.y, this.screenerMC.height, 1, true);				this.__screenerTweenAlpha = new Tween(this.screenerMC, "alpha", Strong.easeOut, this.screenerMC.alpha, 0, 1, true);		}else{			this.__screenerTweenY.continueTo(this.screenerMC.height, 1);			this.__screenerTweenAlpha.continueTo(0, 1);		}		}					/////////////////// EVENTS ///////////////////////////////////////////////////////////////////////		// EVENT handles when the main file is initialized	public function onInit(eventObj:Event):void{		trace("onInit event caught on: " + this);					}		// EVENT handles when main file has load progress	public function onProgress(eventObj:ProgressEvent):void{		trace("onProgress event caught on: " + this);				this.loadingAnimationMC.alpha = 100;		this.loadingAnimationMC.currentPercentage = Math.round((eventObj.bytesLoaded / eventObj.bytesTotal) * 100);;	}		// EVENT handles when main file has load complete	public function onComplete(eventObj:Event):void{		trace("onComplete event caught on: " + this);				this.loadingAnimationMC.alpha = 0;		this.play();		}			// EVENT handles when main display object, AS30 is added to stage	public function onAddedToStage(eventObj:Event):void{		trace("onAddedToStage event caught on: " + this);				setupStage();				setupListeners();		//setupReflectionLinks();	}		//EVENT handles when info is packaged	public function onPackagedInfo(eventObj:XMLEvent):void{		trace("onPackagedInfo event caught on: " + this);				//first we make sure that theController has a loading animation MovieClip		this.shellController.loadAnimationMC = this.loadingAnimationMC;				//now we can get the section		//this.shellController.getSection("Main", 0);				//this.shellController.currentLoader.x -= 294;		//this.shellController.currentLoader.y -= 92;	}		// EVENT handles when a Reflection Section is clicked	public function onSectionClicked(eventObj:LinkEvent):void{		trace("onSectionsClicked event caught on: " + this);		//		trace(eventObj.sectionType);//		trace(eventObj.sectionIndex);//		trace(eventObj.sectionTitle);				//decorate link		if(eventObj.currentTarget == link1){			this.link1Decorated = new WLinkDecorator(LinkController(eventObj.currentTarget));			this.link1Decorated.addEventListener(LinkEvent.SUB_CLICKED, onSubClicked);		}else if(eventObj.currentTarget == link2){			this.link2Decorated = new WLinkDecorator(LinkController(eventObj.currentTarget));			this.link2Decorated.addEventListener(LinkEvent.SUB_CLICKED, onSubClicked);		}else if(eventObj.currentTarget == link3){			this.link3Decorated = new WLinkDecorator(LinkController(eventObj.currentTarget));			this.link3Decorated.addEventListener(LinkEvent.SUB_CLICKED, onSubClicked);		}				//if the section matches the current section, then we know it is in the section area		//already, and therefore we trigger the returnHome function. Otherwise we tween it to 		//the section area		if(this.__currentSection == null) {			//first make all other sections not visible			for(var i in this.__links){				//make sure all links cannot receive mouse events until tween is complete				this.__links[i].disableMouse(true);				trace("disabling: " + this.__links[i].title);								if(this.__links[i] != eventObj.currentTarget){					//this.__links[i].resetReflection();										//disable reflection					this.__links[i].reflectionVisible = false;										//scale down					this.__links[i].scaleX = this.__links[i].scaleY = .35;										//set coordinates					this.__links[i].x = this["__link" + (i+1) + "MinimizedX"];					this.__links[i].y = this["__link" + (i+1) + "MinimizedY"];				}				}				tweenToSectionArea(DisplayObject(eventObj.currentTarget));			removeScreener();		}else if(eventObj.currentTarget != this.__currentSection) {			for(var j in this.__links){				//make sure all links cannot receive mouse events until tween is complete				this.__links[j].disableMouse(true);			}						//set the next section to clicked			this.__nextSection = DisplayObject(eventObj.currentTarget);							//call function to return the current section home			returnHome();			removeScreener();		}	}		// EVENT handles when link clicked	public function onSubClicked(eventObj:LinkEvent):void{		trace("onSubClicked event caught on: " + this);				//now we can get the section		this.shellController.getSection(eventObj.sectionType, eventObj.sectionIndex);	}		// EVENT handles when a section lands in the section area	public function onSectionSet(eventObj:TweenEvent):void{		trace("onSectionSet event caught on: " + this);				//first make all other sections not visible		for(var i in this.__links){			//set the links back to being able to recieve mouse events			this.__links[i].animationEnabled = false;			this.__links[i].disableMouse(false);		}				eventObj.currentTarget.obj.revealSubSections();					//update the current section		this.__currentSection = eventObj.currentTarget.obj;				//now trigger one of the sub sections		eventObj.currentTarget.obj.forceClick(0);	}		// EVENT handles when a section lands in the section area	public function onReturnedHome(eventObj:TweenEvent):void{		trace("onReturnedHome event caught on: " + this);				eventObj.currentTarget.obj.reflectionVisible = false;				tweenToSectionArea(DisplayObject(this.__nextSection));	}		// EVENT handles when the shell has loaded something	public function onShellComplete(eventObj:Event):void{		trace("onShellComplete event caught on: " + this);					}		// EVENT handles when the link is ready for action	public function onLinkReady(eventObj:LinkEvent):void{		trace("onLinkReady function called on: " + getQualifiedClassName(this));					}		// EVENT handles when a section type changes	public function onSectionTypeChanged(eventObj:ShellEvent):void{		trace("onSectionTypeChanged event caught on: " + getQualifiedClassName(this));				if(eventObj.changeType == "Top_Nav"){			revealScreener();		}else{			removeScreener();		}		}	}}