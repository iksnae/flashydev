import com.games.qill.control.Qiller;class com.games.qill.control.control {	private var __HERO:Qiller;	static const RIGHT = 37;	static const LEFT = 39;	static const UP = 38;	private var keyPressedRight:Boolean;	private var keyPressedLeft:Boolean;	private var keyPressedUp:Boolean;	private var shipIncrement:int=0;	public function control() {		Mainloop3();	}	public function Mainloop3() {		addEventListener(Event.ENTER_FRAME, run);		stage.addEventListener(KeyboardEvent.KEY_DOWN,keyDownListener);		stage.addEventListener(KeyboardEvent.KEY_UP,keyUpListener);		ship_mc.nextrotation=ship_mc.rotation;		ship_mc.dx=0;		ship_mc.dy=0;		ship_mc.speed=.2;		ship_mc.nextx=ship_mc.x;		ship_mc.nexty=ship_mc.y;	}	private function run(e:Event):void {		getKeys();		moveObjectsInMemory();		render();	}	private function keyDownListener(e:KeyboardEvent):void {		switch (e.keyCode) {			case LEFT :				keyPressedRight=true;				break;			case RIGHT :				keyPressedLeft=true;				break;			case UP :				keyPressedUp=true;				break;		}	}	private function keyUpListener(e:KeyboardEvent):void {		switch (e.keyCode) {			case LEFT :			trace('left')				keyPressedRight=false;				break;			case RIGHT :				keyPressedLeft=false;				break;			case UP :				keyPressedUp=false;				break;		}	}	private function getKeys() {		shipIncrement=0;		if (keyPressedRight) {			shipIncrement=5;		} else if (keyPressedLeft) {			shipIncrement=-5;		}		if (keyPressedUp) {			ship_mc.dx=ship_mc.dx+ship_mc.speed*(Math.cos(2.0*Math.PI*(ship_mc.rotation-90)/360.0));			ship_mc.dy=ship_mc.dy+ship_mc.speed*(Math.sin(2.0*Math.PI*(ship_mc.rotation-90)/360.0));		}	}	private function moveObjectsInMemory() {		ship_mc.nextrotation=ship_mc.rotation+shipIncrement;		ship_mc.nextx=ship_mc.x+ship_mc.dx;		ship_mc.nexty=ship_mc.y+ship_mc.dy;		if (ship_mc.nextx < 0) {			ship_mc.nextx=300;		}		if (ship_mc.nextx > 300) {			ship_mc.nextx=0;		}		if (ship_mc.nexty < 0) {			ship_mc.nexty=300;		}		if (ship_mc.nexty > 300) {			ship_mc.nexty=0;		}	}	private function render() {		ship_mc.rotation=ship_mc.nextrotation;		ship_mc.x=ship_mc.nextx;		ship_mc.y=ship_mc.nexty;	}}