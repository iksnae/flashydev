package com.games.qill{	import flash.display.*;	import flash.events.*;	import flash.text.*;	import flash.xml.*;	import flash.net.*;	import com.util.XMLUtilities;		import com.games.qill.control.control;	import com.games.qill.control.Qiller;			public class main extends Sprite {		private var __PATH:String = 'com.games.qill.';		private var __CLASSID:String = 'main.';		private var __USER:String;		private var __LOG:TextField;		private var __ENV:Sprite;		private var __VERBOSE:Boolean=true;		private var __CONFIG:String ='xml/settings.xml';		private var __LOADER:URLLoader = new URLLoader();		public function main():void {			logger('main()');			init();		}		/* 		--> logger()		custom logger method... outputs to textField and output window...		future plans include printing to textfile on server via php...		*/		public function logger(msg:String) {			if (__VERBOSE) {				trace(__PATH+__CLASSID+msg);				display_txt.text+=__PATH+__CLASSID+msg+'\r';			} else {				trace(__CLASSID+msg);				display_txt.text+=__CLASSID+msg+'\r';			}		}		private function init() {			logger('init()');			logger(' - setting up invironment...');			configureListeners(__LOADER);			LoadSettings();		}		private function LoadSettings() {			logger('LoadSettings()');			logger(' - loading settings...');			var loader:URLLoader = new URLLoader();            configureListeners(loader);            var request:URLRequest = new URLRequest(__CONFIG);            try {                loader.load(request);            } catch (error:Error) {                trace("Unable to load requested document.");            }		}				private function configureListeners(dispatcher:IEventDispatcher) {			dispatcher.addEventListener(Event.COMPLETE, sLoadcompleteHandler);			dispatcher.addEventListener(Event.OPEN, sLoadopenHandler);			dispatcher.addEventListener(ProgressEvent.PROGRESS, sLoadprogressHandler);			dispatcher.addEventListener(SecurityErrorEvent.SECURITY_ERROR, sLoadsecurityErrorHandler);			dispatcher.addEventListener(HTTPStatusEvent.HTTP_STATUS, sLoadhttpStatusHandler);			dispatcher.addEventListener(IOErrorEvent.IO_ERROR, sLoadioErrorHandler);		}		private function sLoadcompleteHandler(event:Event):void {            var loader:URLLoader = URLLoader(event.target);            logger("completeHandler: " + loader.data);			logger(" - Settings Loaded.");                var vars:URLVariables = new URLVariables(loader.data);            logger("The answer is " + vars.answer);        }        private function sLoadopenHandler(event:Event):void {            logger("openHandler: " + event);        }        private function sLoadprogressHandler(event:ProgressEvent):void {            logger("progressHandler loaded:" + event.bytesLoaded + " total: " + event.bytesTotal);        }        private function sLoadsecurityErrorHandler(event:SecurityErrorEvent):void {            logger("securityErrorHandler: " + event);        }        private function sLoadhttpStatusHandler(event:HTTPStatusEvent):void {            logger("httpStatusHandler: " + event);        }        private function sLoadioErrorHandler(event:IOErrorEvent):void {            logger("ioErrorHandler: " + event);        }	}}