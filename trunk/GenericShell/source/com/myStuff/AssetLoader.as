/* COPYRIGHT */import mx.events.EventDispatcher;import mx.utils.Delegate;/** * AssetLoader *  event based loading of external assets into movieclips *  jpegs, swfs, pngs */class com.myStuff.AssetLoader{    // constants    private var INTERVAL_TIME:Number = 100;    // props    private var clip:MovieClip;    private var content:String;     private var workingDirectory:String = "";    private var timer:Number;    private var lastBytesLoaded:Number;    private var hideOnLoad:Boolean = false;    private var x:Number;    private var y:Number;    // event mix-ins    public var removeEventListener:Function;    public var addEventListener:Function;    private var dispatchEvent:Function;    /**     * constructor     */    public function AssetLoader()     {	EventDispatcher.initialize(this);    }    /**     * start load     * @param clip - MovieClip, target to load asset into     * @param content - String, path to content to be loaded     */    public function load( clip:MovieClip, content:String, hideOnLoad:Boolean ) : Void     {	trace("AL.load( "+clip+", "+content+","+hideOnLoad+")");	if ( clip == undefined || content == undefined || content.length<= 0 )         {	    throw new Error("Invalid parameters - content cannot be null");	}	if ( typeof(clip) != "movieclip" ) 	{	    throw new Error("Invalid parameters - clip must be existing MovieClip ["+clip+"]");	}	this.hideOnLoad = hideOnLoad;	this.clip = clip;	this.content = content;	clip.loadMovie( workingDirectory + content );	if ( hideOnLoad ) {	    y = clip._y;	    clip._y = -2000;	}	timer = setInterval( Delegate.create(this, interval),INTERVAL_TIME );    }    /**     * check loading progress, trigger events where necessary     */    public function interval() : Void     {	if ( getBytesTotal() == -1 ) {	    trace("error loading: \""+content+"\""+"  "+getBytesTotal()+"/"+getBytesLoaded());	    clearInterval(timer);	    dispatchEvent({type:"error"});	}	else if ( getBytesLoaded() > 10 && getBytesLoaded() == getBytesTotal() ) 	{	    trace("complete");	    clearInterval( timer );	    if ( hideOnLoad == true ) {		clip._visible = false;		clip._y = y;	    }	    dispatchEvent( {type:"complete", target:clip} );	}	else if ( getBytesLoaded() != lastBytesLoaded )         {	    trace("progress");	    lastBytesLoaded = getBytesLoaded();	    dispatchEvent({type:"progress",target:clip});	}    }    /**     * wrapper to acces bytes loaded property of target clip     */     public function getBytesLoaded() : Number     {	return clip.getBytesLoaded();    }    /**     * wrapper to acces total bytes property of target clip     */     public function getBytesTotal() : Number     {	return clip.getBytesTotal();    }}