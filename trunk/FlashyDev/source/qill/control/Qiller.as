package com.games.qill.control{	import flash.display.MovieClip;	import flash.events.*;	public class Qiller extends MovieClip {		/*		static constant references to Key Codes...		*/		static const RIGHT=37;		static const LEFT=39;		static const UP=38;		static const DOWN=40;		static const SPACE=32;		static const KEY_A=65;		static const KEY_S=83;		static const KEY_D=68;		static const KEY_F=70;				/*		Key State Booleans. used to toggle the state of specified keys...		by default these are set to false..		*/		private var __KEYPRESS_RIGHT:Boolean;		private var __KEYPRESS_LEFT:Boolean;		private var __KEYPRESS_UP:Boolean;		private var __KEYPRESS_DOWN:Boolean;		private var __KEYPRESS_SPACE:Boolean;		private var __KEYPRESS_A:Boolean;		private var __KEYPRESS_S:Boolean;		private var __KEYPRESS_D:Boolean;		private var __KEYPRESS_F:Boolean;				/*		hero's action related booleans... these determine the action state of the hero.		by default these are set to false... in the case that no buttons are being pressed,		the value of __IDLE will be set to true..		*/		private var __JUMPING:Boolean;		private var __ATTACKING:Boolean;		private var __BLOCKING:Boolean;		private var __DUCKING:Boolean;						/*		movement related properties... the values of these properties will be used to calcualte the		hero's movements... these values are dynamic and will adjust with players experience/state		*/		private var __HORIZ_INCRE:int=0;		private var __VERTI_INCRE:int=0;		private var __HERO:MovieClip;		private var __SPEED:Number=0;		private var __DISTANCE_TRAVELED:Number;		private var __nextpos:Number;		/*		experience related proerties... the values of these properties are stored in association with 		the player's user ID  in MySQL db... as player games experience these vales will adjust... at save/checkpoints		these values will be posted to MySQL db via php		*/		private var __SLAY_COUNT:Number;		private var __MAXSTRENGTH:Number=10;		private var __MAXSPEED:Number=10;		private var __HALFSPEED:Number=__MAXSPEED / 2;				private var __WEAPONS:Array;		private var __CURRENTWEAPON:Boolean;		private var __COMBOSLEARNED:Array;		// constructor		public function Qiller() {			addEventListener(Event.ENTER_FRAME,run);			stage.addEventListener(KeyboardEvent.KEY_DOWN,keyDownListener);			stage.addEventListener(KeyboardEvent.KEY_UP,keyUpListener);			HERO.__nextpos=0;		}		public function run(e:Event):void {			moveObjectsInMemory();			render();		}		public function keyDownListener(e:KeyboardEvent):void {			switch (e.keyCode) {				case LEFT :					__KEYPRESS_LEFT=true;					break;				case RIGHT :					__KEYPRESS_RIGHT=true;					break;				case UP :					__KEYPRESS_UP=true;					break;				case DOWN :					__KEYPRESS_DOWN=false;					break;				case SPACE :					__KEYPRESS_SPACE=false;					break;				case KEY_A :					__KEYPRESS_S=false;					break;				case KEY_S :					__KEYPRESS_S=false;					break;				case KEY_D :					__KEYPRESS_D=false;					break;				case KEY_F :					__KEYPRESS_F=false;					break;			}		}		public function keyUpListener(e:KeyboardEvent):void {			switch (e.keyCode) {				case LEFT :					__KEYPRESS_LEFT=false;					break;				case RIGHT :					__KEYPRESS_RIGHT=false;					break;				case UP :					__KEYPRESS_UP=false;					break;				case DOWN :					__KEYPRESS_DOWN=false;					break;			}		}		public function moveObjectsInMemory() {			if (__KEYPRESS_LEFT) {				HERO.nextx=HERO.x + __MAXSPEED;			}		}		public function render() {			HERO.x=HERO.nextx;		}	}}