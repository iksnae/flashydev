/** * @author k */import com.continuityny.courtyard.views.home.HomeView;import com.continuityny.courtyard.views.home.SlicedPanel;import gs.TweenLite;import flash.display.BitmapData;import flash.geom.*;import com.continuityny.courtyard.views.home.HomeData;class com.continuityny.courtyard.views.home.HomeSliced extends MovieClip implements SlicedPanel {		private var shell:HomeView;	private var _bmp:BitmapData;	private var _sliceWidth:Number=50;	private var _defaultXpos:Array=new Array();	private var _alternateXpos:Array=new Array();	private var _slices:Array=new Array();	private var offsets:Array = new Array(-9,-8,-7,-6,-5,-4,-3,-2,-1,1,2,3,4,5,6,7,8,9,10,11);	private var onRevealComplete:Function;			public function HomeSliced(container,bmp) {		container.__proto__ = this.__proto__;		container.__constructor__ = HomeSliced;		this = container;		_bmp = bmp;		shell=_global.HomeMuthaFuckinShell;		build();	}	private function build(){				for(var i=0;i<20;i++){			var slice:MovieClip = this.createEmptyMovieClip(this._name+"slice"+i,i);					//	trace('buildSlice: '+slice+' with: '+_bmp);						var newBmp:BitmapData = new BitmapData(_sliceWidth,400,true);			newBmp.copyPixels(_bmp,new Rectangle(i*_sliceWidth,0,_sliceWidth,400),new Point(0,0));						slice.attachBitmap(newBmp, 0);			slice._x=(i*_sliceWidth);			_slices.push(slice);									_defaultXpos.push(slice._x);			_alternateXpos.push((((offsets[i])*1000)*1.5));			slice._x=_alternateXpos[i];			}		hidePage();	}	public function revealPage():Void{		trace('reveal: '+this)		for(var i=0;i<20;i++){			var s = this[this._name+"slice"+i];			TweenLite.to(s,1.7,{_x:_defaultXpos[i],onComplete:done,onCompleteScope:this});					}		}	public function hidePage():Void{		for(var i=0;i<20;i++){			var s = this[this._name+"slice"+i];			TweenLite.to(s,3,{_x:_alternateXpos[i]});		}	}	private var doneNum:Number=0;	private function done(){	//	trace('done: '+doneNum)		doneNum++;		if(doneNum==20){			doneNum=0;			fin();		}		}	private function fin(){		trace('fin')		shell.finito();	}	}