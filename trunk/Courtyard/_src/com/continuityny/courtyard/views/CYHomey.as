/** * @author k */import com.bourre.commands.Delegate;import flash.display.BitmapData;import gs.TweenLite;import flash.geom.*;import mx.transitions.easing.*;class com.continuityny.courtyard.views.CYHomey extends MovieClip {		/******************************************	 * WELCOME 	 * 	 * 	 ******************************************/				public var ReadyToGo:Boolean=false;	private var AutoStart:Boolean;	private var myScope:MovieClip;		private var imageLoader:MovieClipLoader;		private var imageOutter:MovieClip;	private var imageInner:MovieClip;	private var imageHolder:MovieClip;		private var bandHolder:MovieClip;	private var backgroundHolder:MovieClip;	private var neutralHolder:MovieClip;		private var meDepth:Number;	private var meX:Number;	private var meW:Number;	private var mmeX:Number;	private var neutNum:Number=0;	private var currentNum:Number = 0;	private var imageWidth:Number = 970;	private var imageHeight:Number = 400;	private var sliceCount:Number = 20;	private var sliceWidth:Number;			private var bitmaps:Array=new Array();	private var imageURLS:Array = new Array();	private var colors:Array=new Array(0x5F8437,0xB0CF61,0x5F8437,0xffffff);	private var allMasks:Array;	private var allBackgrounds:Array;	private var allBands:Array;	private var allNeutrals:Array;	private var movingPanels:Array=new Array();				private var imageWidths:Array=new Array(754,780,593,483,383,374);			private var defaultImageURLS:Array= new Array(											'images/new/lobby.png',											'images/new/market.png',											'images/new/biz.png',											'images/new/room.png',											'images/new/fitness.png',											'images/new/outdoor.png',																						'images/lobby_w_lines.png',															'images/market_w_lines.png',											'images/biz_w_lines.png',											'images/room_w_lines.png',																		'images/fitness_w_lines.png',											'images/outdoorStill.jpg'																					);												private var sections:Array = new Array(											'lobby',											'market',											'business',											'guest_room',											'fitness',											'outdoor'	);					// backgrounds		private var LobbyImage:MovieClip;	private var MarketImage:MovieClip;	private var RoomImage:MovieClip;	private var BusinessImage:MovieClip;	private var FitnessImage:MovieClip;	private var OutdoorImage:MovieClip;		// masks	private var LobbyMask:MovieClip;	private var MarketMask:MovieClip;	private var RoomMask:MovieClip;	private var BusinessMask:MovieClip;	private var FitnessMask:MovieClip;	private var OutdoorMask:MovieClip;		// color bands		private var Band0:MovieClip;	private var Band1:MovieClip;	private var Band2:MovieClip;	private var Band3:MovieClip;			// neutral images		private var LobbyNeutral:MovieClip;	private var MarketNeutral:MovieClip;	private var RoomNeutral:MovieClip;	private var BusinessNeutral:MovieClip;	private var FitnessNeutral:MovieClip;	private var OutdoorNeutral:MovieClip;		// arrays for storiing/referencing the neutral images...		private var LobbySlices:Array = new Array();	private var MarketSlices:Array = new Array();	private var RoomSlices:Array = new Array();	private var BusinessSlices:Array = new Array();	private var FitnessSlices:Array = new Array();	private var OutdoorSlices:Array = new Array();		private var AllSlices:Array;	private var FocusedMask:Array;	private var OnChangeLocation:Function;	private var OnRevealFinished:Function;			private var TemporarySliceArray:Array=new Array();	private var movieStarted : Boolean;	private var showingNeutralImage:Boolean;		private var currentSection:String;		/******************************************************	 * CYHomey:  CONSTRUCTOR	 * --------------------------------------------	 * 	this method initiates the class	 *****************************************************/		public function CYHomey(container,autoStart:Boolean, onRevealFinished:Function) {				OnRevealFinished = onRevealFinished;		container.__proto__ = this.__proto__;		container.__constructor__ = CYHomey;		this = container;		myScope = this;	//	hideBackgroundsAndbands				trace(myScope);				AutoStart= autoStart;			imageURLS = defaultImageURLS;		sliceWidth = Math.round(imageWidth/sliceCount)+1;		trace('sliceWidth: '+sliceWidth);			trace('======================================================\r');				allBackgrounds = new Array(LobbyImage,MarketImage,RoomImage,BusinessImage,FitnessImage,OutdoorImage);		allMasks = new Array(LobbyMask,MarketMask,RoomMask,BusinessMask,FitnessMask,OutdoorMask);		FocusedMask = new Array(true,false,false,false,false,true);		allBands = new Array(Band0,Band1,Band2,Band3);		allNeutrals = new Array(LobbyNeutral,MarketNeutral,RoomNeutral,BusinessNeutral,FitnessNeutral,OutdoorNeutral);		init();	}			/******************************************************	 * changeSection:	 * --------------------------------------------	 * 	this method changes the actual section, based on the	 * 	string passed, by calling the showMySlices() method	 *****************************************************/	public function changeSection(id:String):Void{		if(currentSection!='home'){			var pagefound:Boolean;			currentSection = id;					//	var caller:Function =Delegate.create(this, showMySlices);		//	trace('skope: '+skope);						OnChangeLocation(id);			for(var i in sections){				if(sections[i] == id){					showMySlices(i);				//	stopMotion();					pagefound = true;				}			}			if(id=="home"){				pagefound = true;				if(!movieStarted){					startMovie();				}else{					reset();				}							}						if(pagefound){				trace('page set: '+id);				}else{				trace('page not found: '+id+'. plz check name' );			}		}else{			hideBackgroundsAndbands();		}	}			public function setOnRevealFinished(funct:Function):Void{		OnRevealFinished = funct;	}		/******************************************************	 * startMovie:	 * --------------------------------------------	 * 	this method starts the movement, after verifying	 * 	that the ReadyToGo property is true	 *****************************************************/	 	private function startMovie():Void{		trace("startMovie:");
		if(ReadyToGo){			idleAnimation();		}else{			trace('not ready!');		}	}		/******************************************************	 * reset:	 * --------------------------------------------	 * 	this method hides all neutral images, enables mouse	 * 	interaction and starts the movement	 *****************************************************/		public function reset():Void{				ReadyToGo=true;		hideMySlices(0,this);		hideMySlices(1,this);		hideMySlices(2,this);		hideMySlices(3,this);		hideMySlices(4,this);		hideMySlices(5,this);				for(var h in allBackgrounds){			allBackgrounds[h].enabled=true;			allBackgrounds[h]._visible=true;			allBands[h]._visible=true;		}		idleAnimation();			}		/******************************************************	 * init:	 * --------------------------------------------	 * 	this method calls loadImages() method	 *****************************************************/		private function init():Void{		loadImages();	}		/******************************************************	 * loadImages:	 * --------------------------------------------	 * 	this method initiates the image loading process	 *****************************************************/		private function loadImages():Void{		trace('loading images...\r');		imageLoader = new MovieClipLoader();		imageLoader.addListener(this);		loadNextImage();		}		/******************************************************	 * loadNextImage:	 * --------------------------------------------	 * 	this method loads the next image from the imageURLs array	 *****************************************************/		private function loadNextImage():Void{		imageHolder = createEmptyMovieClip('imageOutter', 0);		imageLoader.loadClip(imageURLS[currentNum],imageHolder);		trace('loading image: '+imageURLS[currentNum]);		currentNum++;	}		/******************************************************	 * onLoadInit:	 * --------------------------------------------	 * 	this method is called when an external image is	 * 	finished loading. it then takes the loaded image	 * 	and converts it to local bitmap data. finally it	 * 	checks to see if all images have been loaded. if 	 * 	all images are not loaded it loads the next image.	 * 	if all images are loaded, it deletes the loader	 * 	clips and set the ReadyToGo property to true and 	 * 	calls build() method.	 *****************************************************/	 	private function onLoadInit():Void{		var bmp:BitmapData=new BitmapData(imageHolder._width, imageHolder._height, true, 0x00000000);		bmp.draw(imageHolder);		bitmaps.push(bmp);		if(currentNum<imageURLS.length){			loadNextImage();		}else{			trace('all images loaded!');				ReadyToGo=true;			delete imageLoader;			imageHolder.removeMovieClip();			build();					}	}	/******************************************************	 * build:	 * --------------------------------------------	 * 	this method creates moving masked images that respond 	 * 	to mouse interaction, as well as sets up the color bands	 * 	with the makeBand() method	 *****************************************************/		private function build():Void{		backgroundHolder = this.createEmptyMovieClip('backgroundHolder', this.getNextHighestDepth());		bandHolder = this.createEmptyMovieClip('bHolder',this.getNextHighestDepth());		neutralHolder = this.createEmptyMovieClip('neutralHolder',this.getNextHighestDepth());	//	backgroundHolder._alpha=50;				for(var i in allBackgrounds){						allBackgrounds[i] = backgroundHolder.createEmptyMovieClip('BG'+i,backgroundHolder.getNextHighestDepth());			allBackgrounds[i].id = i;									allBackgrounds[i].onRollOver=function():Void{				this._parent._parent.showMe(this.id);			};			allBackgrounds[i].onRollOut=function():Void{				this._parent._parent.hideMe(this.id);			};			allBackgrounds[i].onRelease=function():Void{				this._parent._parent.showMySlices(this.id,this._parent._parent);			};					//	allBackgrounds[i].useHandCursor=false;									var bgHolder:MovieClip = allBackgrounds[i].createEmptyMovieClip('img',0);						bgHolder.beginBitmapFill(bitmaps[i],new Matrix(),true,true);			bgHolder.moveTo(0,0);			bgHolder.lineTo(imageWidths[i],0);			bgHolder.lineTo(imageWidths[i],imageHeight);			bgHolder.lineTo(0,imageHeight);			bgHolder.endFill();					allMasks[i] = backgroundHolder.createEmptyMovieClip('MASK'+i,backgroundHolder.getNextHighestDepth());			allMasks[i].moveT(0,0);			allMasks[i].beginFill(0xffffff);			allMasks[i].lineTo(0,0);			allMasks[i].lineTo(100,0);			allMasks[i].lineTo(100,imageHeight);			allMasks[i].lineTo(0,imageHeight);			allMasks[i].endFill();						allBackgrounds[i].setMask(allMasks[i]);							movingPanels.push(allMasks[i]);						if(FocusedMask[i]){				setupPanel(allMasks[i],'focused');			}else{				setupPanel(allMasks[i],'normal');			}					}				for(var k:Number=0; k<allBands.length;k++){			makeBand(allBands[k],k);		}						createNeutrals();		trace('========================================================');	}		/******************************************************	 * createNeutrals:	 * --------------------------------------------	 * 	this method creates the neutral images and slices	 * 	them into 20 masked verticle peices	 *****************************************************/	private function createNeutrals():Void{				 		for(var j:Number=0;j< allNeutrals.length;j++){						allNeutrals[j] = neutralHolder.createEmptyMovieClip('neut'+j, neutralHolder.getNextHighestDepth());		//	allNeutrals[j]._alpha=50;			trace(allNeutrals[j]);			for(var m:Number=0; m<sliceCount; m++){				var bg:MovieClip = allNeutrals[j].createEmptyMovieClip('bg'+m, allNeutrals[j].getNextHighestDepth());				var mask:MovieClip = bg.createEmptyMovieClip(allNeutrals[j]._name+'_mask'+m, allNeutrals[j].getNextHighestDepth());				var img:MovieClip = bg.createEmptyMovieClip('img', 0);								img.beginBitmapFill(bitmaps[j+6],new Matrix(),false,true);				img.moveTo(0,0);				img.lineTo(imageWidth,0);				img.lineTo(imageWidth,imageHeight);				img.lineTo(0,imageHeight);				img.endFill();																mask.beginFill(0xfff,50);				mask.moveTo(0,0);				mask.lineTo(sliceWidth,0);				mask.lineTo(sliceWidth,imageHeight);				mask.lineTo(0,imageHeight);				mask.endFill();				 			mask._x=m*50;	 			//img._x=0-(m*50);	 		//	trace(mask)	 			mask.id=m;	 			img.setMask(mask);	 			TemporarySliceArray.push(mask);	 			makeMeInvisible(mask);			}		}		organizeSlices();	}	/******************************************************	 * makeBand:	 * --------------------------------------------	 * 	this method creates c	 *****************************************************/	private function makeBand(targ:MovieClip,num:Number):Void{				targ = bandHolder.createEmptyMovieClip('band_'+num,num);		var w:Number= randBandWidth();		targ.beginFill(colors[num],40);		targ.moveTo(0,0);		targ.lineTo( w,0);		targ.lineTo( w,imageHeight);		targ.lineTo(0,imageHeight);		targ.endFill();						targ._x=randX();		targ._width = randBandWidth();		setupPanel(targ,'band');				movingPanels.push(targ);	}		/******************************************************	 * idleAnimation:	 * --------------------------------------------	 * 	this method determines if the clips passed	 * 	are to function normally or in focused mode	 *****************************************************/		private function idleAnimation():Void{		trace("idleAnimation");		for(var i:Number=0;i<movingPanels.length;i++){						movingPanels[i]._visible=true;						var xpos:Number = randX();			var time:Number = randTime();						switch(movingPanels[i].type){				case 'normal':					TweenLite.to(movingPanels[i],time,{_x:xpos,_width:randWidth(),onComplete:keepMoving,onCompleteParams:[movingPanels[i]],onCompleteScope:this});				break;								case 'focused':					TweenLite.to(movingPanels[i],time,{_x:xpos,_width:randWidthFocused(),onComplete:keepMoving,onCompleteParams:[movingPanels[i]],onCompleteScope:this});				break;								case 'band':					TweenLite.to(movingPanels[i],time,{_x:xpos,_width:randBandWidth(),onComplete:keepMoving,onCompleteParams:[movingPanels[i]],onCompleteScope:this});				break;			}		}	}		/******************************************************	 * setupPanel:	 * --------------------------------------------	 * 	this method initiates the "targ" MC's motion 	 * 	and stores the "type" property in that MC	 *****************************************************/	private var alterEgoHaHaHa:Boolean;	private function setupPanel(targ:MovieClip, type:String):Void{		var panel:MovieClip = targ;		panel.type= type;		if(alterEgoHaHaHa){			alterEgoHaHaHa=false;			panel._x=-100;		}else{			alterEgoHaHaHa=true;				panel._x=1200;		}		trace("SETUP: "+panel+"  "+type);			}		/******************************************************	 * keepMoving:	 * --------------------------------------------	 * 	this method resets the "targ" MC's motion 	 * 	targets. keeps the looping animation going...	 *****************************************************/		private function keepMoving(targ:MovieClip):Void{			var panel:MovieClip = targ;		var time:Number = randTime();		var xpos:Number = randX();			switch(panel.type){									case 'normal':				TweenLite.to(panel,time,{_x:xpos,_width:randWidth(),onComplete:keepMoving,onCompleteParams:[panel],onCompleteScope:this});			break;									case 'focused':				TweenLite.to(panel,time,{_x:xpos,_width:randWidthFocused(),onComplete:keepMoving,onCompleteParams:[panel],onCompleteScope:this});			break;									case 'band':				TweenLite.to(panel,time,{_x:xpos,_width:randBandWidth(),onComplete:keepMoving,onCompleteParams:[panel],onCompleteScope:this});			break;					}			}			private function showMe(id:Number):Void{		trace('showMe: '+allMasks[id]);				meDepth = allBackgrounds[id].getDepth();		allBackgrounds[id].swapDepths(backgroundHolder.getNextHighestDepth());		// calculate center of image		var xpos:Number =(imageWidth/2)-imageWidths[id]/2;				// store current position		mmeX = allMasks[id]._x;		meX = allBackgrounds[id]._x;		meW = allMasks[id]._width;			// animate targeted clip		TweenLite.killTweensOf(allMasks[id],false);		TweenLite.to(allMasks[id], 1.6, {_x:xpos,_width:imageWidths[id]});		TweenLite.to(allBackgrounds[id],1.6,{_x:xpos});			}			private function hideMe(id:Number):Void{		trace('hideMe: '+allMasks[id]);		var callback:Function = Delegate.create(this,putMeBack);		TweenLite.to(allMasks[id], 1.6, {_x:mmeX,_width:meW,onComplete:callback,onCompleteParams:[allMasks[id]],onCompleteScope:this});		TweenLite.to(allBackgrounds[id], 1.6, {_x:meX});				}			private	function putMeBack(targ:MovieClip):Void{		trace('putMeBack: '+targ);		allBackgrounds[targ.id].swapDepths(meDepth);		keepMoving(targ);	}			/*	 * these methods reveal and hide the neutral images....	 */	private function hideMySlices(id:Number):Void{		trace('showMhideMySlicesySlices: '+id);		showingNeutralImage=false;		for(var i:Number=0; i<20; i++){			makeMeInvisible(AllSlices[id][i]);			TweenLite.to(AllSlices[id][i],.6,{_x:AllSlices[id][i].altX,onComplete:makeMeInvisible,onCompleteScope:this,onCompleteParams:[AllSlices[id][i]]});		}	}			private function showMySlices(id:Number):Void{		trace('showMySlices: '+id);	//	stopMotion();		//	trace('scope: '+scope);		for(var j:Number=0; j<5;j++){			trace('-checking: '+j+'  vs  '+id);			if(id==j){				trace('--match: '+AllSlices[j][id]);				for(var i:Number=0; i<20; i++){					makeMeVisible(AllSlices[j][i]);					TweenLite.to(AllSlices[j][i],2.6,{_x:AllSlices[id][i].defX, ease:Strong.easeOut, onComplete:revealFinished, onCompleteScope:this});				}			}else{				hideMySlices(j);			}		}	}		private function makeMeInvisible(targ:MovieClip):Void{	//	trace("makeMeInvisible: "+targ);		targ._visible=false;		}	private function makeMeVisible(targ:MovieClip):Void{	//	trace("makeMeVisible: "+targ);		targ._visible=true;		}	private function organizeSlices():Void{		for(var i in TemporarySliceArray){		//	trace(TemporarySliceArray[i]._name);			TemporarySliceArray[i].defX=TemporarySliceArray[i]._x;					TemporarySliceArray[i].altX = ((TemporarySliceArray[i].id-(sliceCount/2))*(imageWidth*1.2)-sliceWidth);			TemporarySliceArray[i]._x= TemporarySliceArray[i].altX;								var key:String =  TemporarySliceArray[i]._name.substr(4,1);		//	trace(key);			switch(key){												case '0':					LobbySlices.push(TemporarySliceArray[i]);					break;				case '1':					MarketSlices.push(TemporarySliceArray[i]);					break;				case '2':					RoomSlices.push(TemporarySliceArray[i]);					break;				case '3':					BusinessSlices.push(TemporarySliceArray[i]);					break;				case '4':					FitnessSlices.push(TemporarySliceArray[i]);					break;				case '5':					OutdoorSlices.push(TemporarySliceArray[i]);					break;							}		}		ReadyToGo=true;						trace('LobbySlices:'+LobbySlices.length);		trace('MarketSlices:'+MarketSlices.length);		trace('RoomSlices:'+RoomSlices.length);		trace('BusinessSlices:'+BusinessSlices.length);		trace('LobbySlices:'+FitnessSlices.length);		trace('OutdoorSlices:'+OutdoorSlices.length);		AllSlices = new Array(LobbySlices,MarketSlices,RoomSlices,BusinessSlices,FitnessSlices,OutdoorSlices);			//	TemporarySliceArray = null;	//	delete TemporarySliceArray;	///				if(AutoStart){			idleAnimation();			}	}			// stop all moving parts...	private function stopMotion():Void{			if(ReadyToGo){			trace('stopMotion');			ReadyToGo=false;			for(var h in allBackgrounds){				allBackgrounds[h].enabled=false;				allBackgrounds[h]._visible=false;			}			for(var i in movingPanels){				TweenLite.killTweensOf(movingPanels[i],false);			}			for(var j in allBands){				allBands[j]._visible=false;				}					}			}	private function revealFinished():Void{		if(!showingNeutralImage){			OnRevealFinished();			stopMotion();			trace("revealFinished");			showingNeutralImage=true;					}	}		private function hideBackgroundsAndbands(id:Number):Void{		TweenLite.to(allMasks[0],1.6,{_x:-600});		TweenLite.to(allMasks[1],1.6,{_x:1600});		TweenLite.to(allMasks[2],1.6,{_x:-600});		TweenLite.to(allMasks[3],1.6,{_x:1600});		TweenLite.to(allMasks[4],1.6,{_x:-600});		TweenLite.to(allMasks[5],1.6,{_x:1600});				TweenLite.to(bandHolder['band_0'],1.6,{_x:-600});		TweenLite.to(bandHolder['band_1'],1.6,{_x:1600});		TweenLite.to(bandHolder['band_2'],1.6,{_x:-600});		TweenLite.to(bandHolder['band_3'],1.6,{_x:1600, onComplete:hideUs, onCompleteParams:[id]});					}	private function hideUs(id:Number):Void{		trace('hideUs');		for(var i in allMasks){			makeMeInvisible(allMasks[i]);		}		for(var j in bandHolder){			makeMeInvisible(bandHolder[j]);		}		showMySlices(id);			}		// random calculators	private function randX():Number {		return Math.round(Math.random()*(imageWidth-75));	}	private function randTime():Number{		return (Math.round(Math.random()*7))+3;	}	private function randWidth():Number{		return (Math.round(Math.random()*200))+25;	}	private function randBandWidth():Number{		return (Math.round(Math.random()*35))+5;	}	private function randWidthFocused():Number {		return (Math.round(Math.random()*200))+100;	}}