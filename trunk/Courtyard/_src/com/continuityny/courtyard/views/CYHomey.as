/** * @author k */import com.bourre.commands.Delegate;import flash.display.BitmapData;import gs.TweenLite;class com.continuityny.courtyard.views.CYHomey extends MovieClip {				private var imageLoader:MovieClipLoader;		private var imageOutter:MovieClip;	private var imageInner:MovieClip;	private var imageHolder:MovieClip;		private var bandHolder:MovieClip;	private var backgroundHolder:MovieClip;	private var neutralHolder:MovieClip;		private var meDepth:Number;	private var meX:Number;	private var mmeX:Number;	private var neutNum:Number=0;	private var currentNum:Number = 0;	private var imageWidth:Number = 970;	private var imageHeight:Number = 400;			private var bitmaps:Array=new Array();	private var imageURLS:Array = new Array();	private var colors:Array=new Array(0x5F8437,0xB0CF61,0x5F8437,0xffffff);	private var allMasks:Array;	private var allBackgrounds:Array;	private var allBands:Array;	private var allNeutrals:Array;		private var imageWidths:Array=new Array(754,780,593,483,383);	private var defaultImageURLS:Array= new Array(											'images/new/lobby.png',											'images/new/fitness.png',											'images/new/market.png',											'images/new/room.png',											'images/new/biz.png',																						'images/lobby_w_lines.png',											'images/fitness_w_lines.png',											'images/market_w_lines.png',											'images/room_w_lines.png',											'images/biz_w_lines.png'																					);					// backgrounds		private var LobbyImage:MovieClip;	private var MarketImage:MovieClip;	private var RoomImage:MovieClip;	private var BusinessImage:MovieClip;	private var FitnessImage:MovieClip;		// masks	private var LobbyMask:MovieClip;	private var MarketMask:MovieClip;	private var RoomMask:MovieClip;	private var BusinessMask:MovieClip;	private var FitnessMask:MovieClip;		// color bands		private var Band0:MovieClip;	private var Band1:MovieClip;	private var Band2:MovieClip;	private var Band3:MovieClip;			// neutral images		private var LobbyNeutral:MovieClip;	private var MarketNeutral:MovieClip;	private var RoomNeutral:MovieClip;	private var BusinessNeutral:MovieClip;	private var FitnessNeutral:MovieClip;			public function CYHomey(container,images) {		container.__proto__ = this.__proto__;		container.__constructor__ = CYHomey;		this = container;						if(images){			imageURLS=images;			trace(' - image urls were supplied. thank you.');		}else{			imageURLS = defaultImageURLS;			trace(' - no image urls were supplied. defaults will be used.');		}		trace('======================================================\r');				allBackgrounds = new Array(LobbyImage,MarketImage,RoomImage,BusinessImage,FitnessImage);		allMasks = new Array(LobbyMask,MarketMask,RoomMask,BusinessMask,FitnessMask);		allBands = new Array(Band0,Band1,Band2,Band3);		allNeutrals = new Array(LobbyNeutral,MarketNeutral,RoomNeutral,BusinessNeutral,FitnessNeutral);		init();	}			private function init():Void{		loadImages();	}				private function loadImages():Void{		trace('loading images...\r');		imageLoader = new MovieClipLoader();		imageLoader.addListener(this);		loadNextImage();		}	private function loadNextImage():Void{		imageHolder = createEmptyMovieClip('imageOutter', 0);		imageLoader.loadClip(imageURLS[currentNum],imageHolder);		trace('loading image: '+imageURLS[currentNum]);		currentNum++;	}			private function onLoadInit():Void{		var bmp:BitmapData=new BitmapData(imageHolder._width, imageHolder._height, true, 0x00000000);		bmp.draw(imageHolder);		bitmaps.push(bmp);		if(currentNum<imageURLS.length){			loadNextImage();		}else{			trace('all images loaded.');				delete imageLoader;			imageHolder.removeMovieClip();			build();		}	}			private function build():Void{		backgroundHolder = this.createEmptyMovieClip('backgroundHolder', this.getNextHighestDepth());		bandHolder = this.createEmptyMovieClip('bHolder',this.getNextHighestDepth());		neutralHolder = this.createEmptyMovieClip('neutralHolder',this.getNextHighestDepth());				for(var i in allBackgrounds){			allBackgrounds[i] = backgroundHolder.createEmptyMovieClip('BG'+i,backgroundHolder.getNextHighestDepth());			allBackgrounds[i].id = i;			allBackgrounds[i].onRollOver=function(){				this._parent._parent.showMe(this.id);			}			allBackgrounds[i].onRollOut=function(){				this._parent._parent.hideMe(this.id);			}			var bgHolder:MovieClip = allBackgrounds[i].createEmptyMovieClip('img',0);			with(bgHolder){				beginBitmapFill(bitmaps[i],new Matrix(),true,true);				moveTo(0,0);				lineTo(imageWidths[i],0);				lineTo(imageWidths[i],imageHeight);				lineTo(0,imageHeight);				endFill();			}			allMasks[i] = backgroundHolder.createEmptyMovieClip('MASK'+i,backgroundHolder.getNextHighestDepth());			allMasks[i].moveT(0,0);			allMasks[i].beginFill(0xffffff);			allMasks[i].lineTo(0,0);			allMasks[i].lineTo(100,0);			allMasks[i].lineTo(100,imageHeight);			allMasks[i].lineTo(0,imageHeight);			allMasks[i].endFill();						allBackgrounds[i].setMask(allMasks[i]);						}				for(var k=0; k<allBands.length;k++){			makeBand(allBands[k],k);		}						//createNeutrals();		idleAnimation();		trace('========================================================');	}			private function createNeutrals():Void{		/*		 * this method will build the neutral images, by creating sliced images		 * that reveal and dispurse when user clicks the home image		 */		for(var j=0;j< allNeutrals.length;j++){					allNeutrals[j] = neutralHolder.createEmptyMovieClip('neut'+j, neutralHolder.getNextHighestDepth());					for(var m=0; m<20; m++){						var bg:MovieClip = allNeutrals[j].createEmptyMovieClip('bg'+m, allNeutrals[j].getNextHighestDepth());						var mask:MovieClip = bg.createEmptyMovieClip(allNeutrals[j]._name+'_mask'+m, allNeutrals[j].getNextHighestDepth());						var img:MovieClip = bg.createEmptyMovieClip('img', 0);												with (img) {							beginBitmapFill(bitmaps[j+5],new Matrix(),false,true);							moveTo(0,0);							lineTo(imageWidth,0);							lineTo(imageWidth,imageHeight);							lineTo(0,imageHeight);							endFill();			 			}			 			with (mask) {							beginFill(0xfff,50);							moveTo(0,0);							lineTo(50,0);							lineTo(50,imageHeight);							lineTo(0,imageHeight);							endFill();			 			}			 			mask._x=m*50;			 			//img._x=0-(m*50);			 			trace(mask)			 			img.setMask(mask);					}				}	}			private function idleAnimation():Void{		for(var i in allMasks){			setupPane(allMasks[i]);			allMasks[i]._x = randX();			allMasks[i]._width = randWidth();		}	}					private function setupPane(targ:MovieClip):Void{		var p:MovieClip = targ;		var t:Number = randTime();		var x:Number = randX();		//trace('move: '+p+' to: '+x+' in '+t+' secs.');		// start motion		TweenLite.to(p,t,{_x:x,_width:randWidth(),onComplete:keepMoving,onCompleteParams:[p],onCompleteScope:this});	}				private function makeBand(targ:MovieClip,num:Number):Void{				targ = bandHolder.createEmptyMovieClip('band_'+num,num);		var w = randBandWidth();	///	trace(targ)		with(targ){			beginFill(colors[num],40);			moveTo(0,0);			lineTo( w,0);			lineTo( w,imageHeight);			lineTo(0,imageHeight);			endFill();		}		targ._x=randX();		targ._width = randBandWidth();		setupPane(targ);	}					private function keepMoving(targ:MovieClip):Void{		var p:MovieClip = targ;		var t:Number = randTime();		var x:Number = randX();		//trace('move: '+p+' to: '+x+' in '+t+' secs.');		TweenLite.to(p,t,{_x:x,_width:randWidth(),onComplete:keepMoving,onCompleteParams:[p],onCompleteScope:this});	}						private function showMe(id:Number):Void{		meDepth = allBackgrounds[id].getDepth();		allBackgrounds[id].swapDepths(backgroundHolder.getNextHighestDepth());		//bandHolder.swapDepths(this.getNextHighestDepth());		var xpos:Number =(imageWidth/2)-imageWidths[id]/2;		meX = allMasks[id]._x;			TweenLite.killTweensOf(allMasks[id],false);		TweenLite.to(allMasks[id], 1, {_x:xpos,_width:imageWidths[id]});		TweenLite.to(allBackgrounds[id],1,{_x:xpos});	}				private function hideMe(id:Number):Void{		var callback = Delegate.create(this,putMeBack,id);		TweenLite.to(allBackgrounds[id], 1,{_x:0})		TweenLite.to(allMasks[id], 1.3, {_x:meX,_width:50,onComplete:callback,onCompleteScope:this});		}			private	function putMeBack(id:Number):Void{			allBackgrounds[id].swapDepths(meDepth);			keepMoving(allMasks[id]);	}			/*	 * these methods will reveal and hide the neutral images....	 */	private function disperse(id:Number):Void{			}	private function regroup(id:Number):Void{			}		private function randX():Number {		return Math.round(Math.random()*800);	}		private function randTime():Number{		return (Math.round(Math.random()*10))+5;	}	private function randWidth():Number{		return (Math.round(Math.random()*200))+25;	}	private function randBandWidth():Number{		return (Math.round(Math.random()*15))+5;	}					}