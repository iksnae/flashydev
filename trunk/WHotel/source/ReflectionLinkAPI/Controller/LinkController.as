package ReflectionLinkAPI.Controller {	import ReflectionLinkAPI.Controller.LinkControllerAbstract;	import ReflectionLinkAPI.View.*;	import ReflectionLinkAPI.Events.*;		import flash.utils.*;	import flash.events.*;	import flash.display.*;		import ReflectionAPI.Reflection;	import fl.transitions.Tween;	import fl.transitions.TweenEvent;	import fl.transitions.easing.*;	import fl.transitions.*;		/** * @author andrehines */public class LinkController extends LinkControllerAbstract {		function LinkController(theSubSections:Array, theTitle:String = "TITLE", theTitleFont:String = "Gill Sans Std", theTitleFontSize:uint = 32, theDescription:String = "THIS IS A DESCRIPTION", theDescriptionFont:String = "Gill Sans Std", theDescriptionFontSize:uint = 28){		trace("LinkController class instantiated");				//call function to prePopulate model    	prePopulateModel(theSubSections, theTitle, theTitleFont, theTitleFontSize, theDescription, theDescriptionFont, theDescriptionFontSize);    			//create the View and set the model		this.__theView = new LinkView();		this.__theView.model = this;		this.addChild(this.__theView);				this.addEventListener(Event.ADDED_TO_STAGE, onAddedToStage);	}		// pre populates model with info	override protected function prePopulateModel(theSubSections:Array, theTitle:String, theTitleFont:String, theTitleFontSize:uint, theDescription:String, theDescriptionFont:String, theDescriptionFontSize:uint):void{		trace("prePopulateModel function called on: " + getQualifiedClassName(this));				this.__subSections = theSubSections;		this.__title = theTitle;		this.__titleFont = theTitleFont;		this.__titleFontSize = theTitleFontSize;		this.__description = theDescription;		this.__descriptionFont = theDescriptionFont;		this.__descriptionFontSize = theDescriptionFontSize;	}		//sets up listeners	override protected function setupListeners():void{		trace("setupListeners function called on: " + getQualifiedClassName(this));					this.__theView.addEventListener(LinkEvent.LINK_READY, onLinkReady);		this.__theView.addEventListener(LinkEvent.ROLLED_OVER, onRolledOver);		this.__theView.addEventListener(LinkEvent.ROLLED_OUT, onRolledOut);		this.__theView.addEventListener(LinkEvent.SECTION_CLICKED, onLinkClicked);		this.__theView.addEventListener(LinkEvent.SUB_CLICKED, onSubLinkClicked);	}		//retrieves the info from the model and loads that particular section in	override protected function getSection(sectionIndex:uint = 0):void{		trace("getSection function called on: " + getQualifiedClassName(this));					}		// forces a link to be clicked	override public function forceClick(targetIndex:uint):void{		trace("forceClick function called on: " + getQualifiedClassName(this));				this.__subSectionsClips[targetIndex].dispatchEvent(new MouseEvent(MouseEvent.CLICK));	}		// reveals Title	override public function revealTitle():void{		trace("revealTitle function called on: " + getQualifiedClassName(this));				this.__reflectionObj = this.__theView.reflectionObj;			if(this.__origTween == null){			this.__origTween = new Tween(this.__reflectionObj.original, "y", Back.easeOut, this.__reflectionObj.original.y, this.__reflectionObj.originalOrigY - (this.__spacing - this.__theView.endTitleY), .7, true);			this.__reflectionTween = new Tween(this.__reflectionObj.reflection, "y", Back.easeOut, this.__reflectionObj.reflection.y, this.__reflectionObj.reflectionOrigY + (this.__spacing - this.__theView.endTitleY), .7, true);					this.__origTween.addEventListener(TweenEvent.MOTION_FINISH, onRevealTitleFinished);			this.__origTween.addEventListener(TweenEvent.MOTION_STOP, onRevealTitleStop);		}else{			this.__origTween.continueTo(this.__reflectionObj.originalOrigY - (this.__spacing - this.__theView.endTitleY), .7);			this.__reflectionTween.continueTo(this.__reflectionObj.reflectionOrigY + (this.__spacing - this.__theView.endTitleY), .7);		}				}		// removes loaded image and reflects it	override public function removeTitle():void{		trace("removeTitle function called on: " + getQualifiedClassName(this));				this.__reflectionObj = this.__theView.reflectionObj;			if(this.__origTween == null){			this.__origTween = new Tween(this.__reflectionObj.original, "y", Back.easeOut, this.__reflectionObj.original.y, this.__reflectionObj.originalOrigY, .7, true);			this.__reflectionTween = new Tween(this.__reflectionObj.reflection, "y", Back.easeOut, this.__reflectionObj.reflection.y, this.__reflectionObj.reflectionOrigY, .7, true);						this.__origTween.addEventListener(TweenEvent.MOTION_FINISH, onRemoveTitleFinished);		}else{			this.__origTween.continueTo(this.__reflectionObj.originalOrigY, .7);			this.__reflectionTween.continueTo(this.__reflectionObj.reflectionOrigY, .7);		}					}		// reveals Description	override public function revealDescription():void{		trace("revealDescription function called on: " + getQualifiedClassName(this));				this.__reflectionObj = this.__theView.reflectionObj;			if(this.__origTween == null){			this.__origTween = new Tween(this.__reflectionObj.original, "y", Back.easeOut, this.__reflectionObj.original.y, this.__reflectionObj.originalOrigY, .7, true);			this.__reflectionTween = new Tween(this.__reflectionObj.reflection, "y", Back.easeOut, this.__reflectionObj.reflection.y, this.__reflectionObj.reflectionOrigY, .7, true);		}else{			this.__origTween.continueTo(this.__reflectionObj.originalOrigY, .7);			this.__reflectionTween.continueTo(this.__reflectionObj.reflectionOrigY, .7);		}			}		// reveals sub sections	override public function revealSubSections():void{		trace("revealSubSections function called on: " + getQualifiedClassName(this));				if(!this.__subSectionsRevealed) {				for(var i in this.__subSections){				//enable				this.__subSections[i].subSection.mouseEnabled = true;								//we acces the Transition Manager that was created in the View				this.__subSections[i].subSectionContainer.visible = true;				this.__subSections[i].subSectionContainer.theTM.startTransition({type:Wipe, direction:Transition.IN, duration:0, easing:Strong.easeOut, startPoint:4});			}		}				//set the boolean		this.__subSectionsRevealed = true;	}		// removes sub sections	override public function removeSubSections():void{		trace("removeSubSections function called on: " + getQualifiedClassName(this));				if(this.__subSectionsRevealed) {			for(var i in this.__subSections){				//disable				this.__subSections[i].subSection.mouseEnabled = false;								//we acces the Transition Manager that was created in the View				this.__subSections[i].subSectionContainer.theTM.startTransition({type:Wipe, direction:Transition.OUT, duration:0, easing:Strong.easeOut, startPoint:4});				this.__subSections[i].subSectionContainer.theTM.addEventListener("allTransitionsOutDone", onRemoveSubSectionsFinished);			}		}				//set the boolean		this.__subSectionsRevealed = false;	}		// resets the reflection	override public function resetReflection():void{		trace("resetReflection function called on: " + getQualifiedClassName(this));				trace("original.y: " + this.__reflectionObj.original.y);		trace("reflection.y: " + this.__reflectionObj.reflection.y);		if(this.__origTween == null){			this.__origTween = new Tween(this.__reflectionObj.original, "y", Back.easeOut, this.__reflectionObj.original.y, this.__reflectionObj.originalOrigY + this.__reflectionObj.original.height, .7, true);			this.__reflectionTween = new Tween(this.__reflectionObj.reflection, "y", Back.easeOut, this.__reflectionObj.reflection.y, this.__reflectionObj.reflectionOrigY - this.__reflectionObj.reflection.height, .7, true);		}else{			this.__origTween.continueTo(this.__reflectionObj.originalOrigY + this.__reflectionObj.original.height, .7);			this.__reflectionTween.continueTo(this.__reflectionObj.reflectionOrigY - this.__reflectionObj.reflection.height, .7);		}	}		// disables Mouse handling events	override public function disableMouse(theBool:Boolean):void{		trace("disableMouse function called on: " + getQualifiedClassName(this));				this.__theView.hitMC.mouseEnabled = !theBool;	}			///////////////////////////////////// EVENTS ///////////////////////////////////////////////////		// EVENT handles when the controller is added to the stage	override public function onAddedToStage(eventObj:Event):void{		trace("onAddedToStage event caught on: " + getQualifiedClassName(this));				//setup Listeners		setupListeners();				this.__theView.setup();	}		// EVENT handles when the link is ready	override public function onLinkReady(eventObj:LinkEvent):void{		trace("onLinkReady event caught on: " + getQualifiedClassName(this));				//first dispatch that the link is ready		dispatchEvent(new LinkEvent(LinkEvent.LINK_READY, false));				//call function to remove the sub sections		//removeSubSections();		for(var i in this.__subSections){			//we acces the Transition Manager that was created in the View			this.__subSections[i].subSectionContainer.visible = false;		}				//call function to revealImage		revealTitle();	}		// EVENT handles when the remove tween is finished	override public function onRemoveTitleFinished(eventObj:TweenEvent):void{		trace("onRemoveTitleFinihsed event caught on: " + getQualifiedClassName(this));					}		// EVENT handles when the remove tween is finished	override public function onRevealTitleFinished(eventObj:TweenEvent):void{		trace("onRevealTitleFinihsed event caught on: " + getQualifiedClassName(this));	}		// EVENT broadcasts that the view has been rolled over	override public function onRolledOver(eventObj:LinkEvent):void{		trace("onRolledOver event caught on: " + getQualifiedClassName(this) + ": " + eventObj.sectionTitle);		if(!this.__subSectionsRevealed && this.__animationEnabled) {			revealDescription();		}	}		// EVENT broadcasts that the view has been rolled over	override public function onRolledOut(eventObj:LinkEvent):void{		trace("onRolledOut event caught on: " + getQualifiedClassName(this) + ": " + eventObj.sectionTitle);				if(!this.__subSectionsRevealed && this.__animationEnabled) {				revealTitle();		}	}		//handles when a section link is clicked	override public function onLinkClicked(eventObj:LinkEvent):void{		trace("onLinkClicked event caught on: " + getQualifiedClassName(this) + ": " + eventObj.sectionTitle);				this.__currentSectionIndex = eventObj.sectionIndex;				dispatchEvent(new LinkEvent(LinkEvent.SECTION_CLICKED, false, false, eventObj.sectionType, eventObj.sectionIndex, eventObj.sectionTitle));	}		//handles when a section link is clicked	override public function onSubLinkClicked(eventObj:LinkEvent):void{		trace("onSubLinkClicked event caught on: " + getQualifiedClassName(this));				dispatchEvent(new LinkEvent(LinkEvent.SUB_CLICKED, false, false, eventObj.sectionType, eventObj.sectionIndex, eventObj.sectionTitle));	}		// EVENT handles when the remove subSection is finished	override public function onRemoveSubSectionsFinished(eventObj:Object):void{		trace("onRemoveSubSectionsFinished event caught on: " + getQualifiedClassName(this));				eventObj.currentTarget.content.visible = false;	}		// EVENT handles when the reveal description starts	override public function onRevealTitleStop(eventObj:TweenEvent):void{		trace("onRevealTitleStop event caught on :" + getQualifiedClassName(this));	}	}}