package{	import flash.display.*;import flash.events.*;import ReflectionGalleryAPI.Events.GalleryEvent;	import ReflectionGalleryAPI.Controller.GalleryController;		/** * @author andrehines */public class Main extends MovieClip {		public var galleryController:GalleryController;	public var loadingAnimationMC:MovieClip;	//public var testBtn:MovieClip;			function Main(){		trace("Main class instantiaed");				this.addEventListener(Event.ADDED_TO_STAGE, onAddedToStage);	}		private function setupStage():void{		this.stage.scaleMode = StageScaleMode.NO_SCALE;	}		private function setupListeners():void{		trace("setupListeners function called: " + this);				//make sure we are listenenig for events from the controller		this.galleryController.addEventListener(GalleryEvent.PACKAGED_INFO, onPackagedInfo);		this.galleryController.stage.addEventListener(FullScreenEvent.FULL_SCREEN, onFullScreen);		//this.testBtn.addEventListener(MouseEvent.CLICK, onTestClicked);	}			/////////////////// EVENTS ///////////////////////////////////////////////////////////////////////			// EVENT handles when main display object, AS30 is added to stage	public function onAddedToStage(eventObj:Event):void{		trace("onAddedToStage event caught on: " + this);				setupStage();				setupListeners();	}		//EVENT handles when info is packaged	public function onPackagedInfo(eventObj:GalleryEvent):void{		trace("onPackagedInfo event caught on: " + this);				//first we make sure that theController has a loading animation MovieClip		this.galleryController.loadAnimationMC = this.loadingAnimationMC;				//now we can get the section		//this.theController.currentSectionType = "Residences";		this.galleryController.forceClick(0);	}		// EVENT handles when the test button is clicked//	public function onTestClicked(eventObj:MouseEvent):void{//		trace("onTestClicked event caught on: " + this);//		//		this.theController.currentSectionType = "FloorPlans";//		this.theController.forceClick(0);//	}	// EVENT handles when a fullscreen is triggered	public function onFullScreen(eventObj:FullScreenEvent):void{		trace("onFullScreen event caught on: " + this);				if (eventObj.fullScreen){	        // Remove input text fields.	        // Add a button that closes full-screen mode.	    }else{	        // Re-add input text fields.	        // Remove the button that closes full-screen mode.	    }				}}}