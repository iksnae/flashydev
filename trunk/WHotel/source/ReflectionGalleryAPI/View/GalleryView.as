package ReflectionGalleryAPI.View {import ReflectionGalleryAPI.View.GalleryViewAbstract;import ReflectionGalleryAPI.Events.*;	import flash.utils.*;import flash.display.*;import flash.text.*;import flash.events.*;import fl.transitions.*;import fl.transitions.easing.*;		/** * @author andrehines */public class GalleryView extends GalleryViewAbstract {	function GalleryView(){		trace("GalleryView class instantiated");	}		override public function setup():void{		trace("setup function called on: " + getQualifiedClassName(this));				setupListeners();		setupBtns();		setupDescriptionBox();	}		//sets up the listening for the view	override protected function setupListeners():void{		trace("setupListeners function called on: " + getQualifiedClassName(this));					//make sure the view is listening for events broadcasted from the model		this.__theModel.addEventListener(GalleryEvent.INFO_CHANGED, onInfoChanged, false);	}		//sets up the next, prev, fullscreen buttons	override protected function setupBtns():void{		trace("setupBtns function called on: " + getQualifiedClassName(this));					this.nextBtn.buttonMode = this.prevBtn.buttonMode = this.zoomBtn.buttonMode = true;				this.nextBtn.addEventListener(MouseEvent.CLICK, onNextClicked, false);		this.prevBtn.addEventListener(MouseEvent.CLICK, onPrevClicked, false);		this.zoomBtn.addEventListener(MouseEvent.CLICK, onZoomClicked, false);				//move the nextBtn		this.nextBtn.x = this.__imageStartingX;		this.nextBtn.y = this.__imageStartingY - (this.nextBtn.height + this.__theModel.spacing + this.__sectionLinkSpacing);				//move the zoomBtn		this.zoomBtn.x = this.nextBtn.x + (this.nextBtn.width + this.__sectionLinkSpacing);		this.zoomBtn.y = this.nextBtn.y;				//move the prevBtn		this.prevBtn.x = this.zoomBtn.x + (this.zoomBtn.width + this.__sectionLinkSpacing);		this.prevBtn.y = this.nextBtn.y;					}		// sets up the TextField that will handle displaying the descriptions of the sections	override protected function setupDescriptionBox():void{		trace("setupDescriptionBox function called on: " + getQualifiedClassName(this));				__descriptionTB = new TextField();		__descriptionHolder = new MovieClip;				this.__descriptionTB.embedFonts = true;		this.__descriptionTB.autoSize = TextFieldAutoSize.LEFT;		this.__descriptionTB.selectable = false;		this.__descriptionTB.width = 160;		this.__descriptionTB.multiline = true;		this.__descriptionTB.wordWrap = true;				//format TextField		var theFormat:TextFormat = new TextFormat();		theFormat.font = this.__theSectionLinkFont;		theFormat.color = 0xFFFFFF;		theFormat.size = 13;				//set the format		this.__descriptionTB.defaultTextFormat = theFormat;				this.__descriptionHolder.addChild(this.__descriptionTB);				//now move the holder to the appropriate coordinates and add to view		this.__descriptionHolder.x = this.__imageStartingX - (this.__descriptionHolder.width + this.__descriptionOffset);		this.__descriptionHolder.y = this.__imageStartingY - this.__theModel.spacing;				this.addChild(this.__descriptionHolder);				//create blank Sprite that will handle drawing and set its coordinates		__connectMC = new MovieClip();					//add to display list		this.addChild(this.__connectMC);				this.__connectMC.x = this.__descriptionHolder.x;		this.__connectMC.y = this.__descriptionHolder.y - this.__connectCornerRadius;	}		//sets up the number links for each image	override protected function setupLinks():void{		trace("setupLinks function called on: " + getQualifiedClassName(this));				//create the container		if(this.__linksMC == null) {				this.__linksMC = new MovieClip();		}else{			//clear the old			this.removeChild(this.__linksMC);			this.__linksMC = new MovieClip();		}				//figure out the number of sections in our current sections type		var theSections:Array = this.__theModel.sections;		var sectionType:String = this.__theModel.currentSectionType;						//iterate and find the index with the matching sectionType		for(var j in theSections){			if(theSections[j].type == sectionType){				var numOfSections:int = theSections[j].length;				break;			}		}				var startingY:int = this.__imageStartingY - this.__theModel.spacing;		var linksArray:Array = new Array();				//add to display		this.addChild(this.__linksMC);				//iterate and create a link for each section we find		for(var i:int = 0; i < numOfSections; i++){			//create link and pass it the correct index			var theLink:MovieClip = createLink(i, this.__theModel.currentSectionType);						//place all links into the container			this.__linksMC.addChildAt(theLink, i);					//push into temp array			linksArray[i] = theLink;						//give the link its button handling			theLink.addEventListener(MouseEvent.CLICK, onLinkClicked);						//now move the link to the appropriate coordinates			theLink.x = this.__imageStartingX - (theLink.width + this.__sectionLinkSpacing);			theLink.y = startingY;						//create hit area			var theBMD:BitmapData = new BitmapData(theLink.theTB.width * 3, theLink.theTB.height, true, 0x00FF0000);			var theBMP:Bitmap = new Bitmap(theBMD);					theLink.addChildAt(theBMP, 0);			theBMP.x = -theLink.theTB.width;						startingY += theLink.height;		}								//call function to reveal links		revealLinks();				//push into the links array on the model		this.__theModel.links = linksArray;				//also broadcast that we have packaged info		dispatchEvent(new ViewEvent(ViewEvent.LINKS_READY, false));	}		//creates a link with a textbox inside it	override protected function createLink(theInt:int, currentSectionType:String):MovieClip{		trace("createLink function called on: " + getQualifiedClassName(this));				var linkMC:MovieClip = new MovieClip();		linkMC.index = theInt;		linkMC.sectionType = currentSectionType;		var linkTB:TextField = new TextField();		linkTB.embedFonts = true;		linkTB.autoSize = TextFieldAutoSize.LEFT;		linkTB.selectable = false;		linkMC.theTB = linkTB;				//format TextField		var theFormat:TextFormat = new TextFormat();		theFormat.font = this.__theSectionLinkFont;		theFormat.color = 0x818384;		theFormat.size = 10;				//set the format		linkTB.defaultTextFormat = theFormat;				//set the text		linkTB.text = String(theInt + 1);		trace("link text: " + linkTB.text);				linkMC.addChild(linkTB);						return linkMC;	}		// reveals links	override protected function revealLinks():void{		trace("revealLinks function called on: " + getQualifiedClassName(this));				this.__linksTM = new TransitionManager(this.__linksMC);		this.__linksTM.startTransition({type:Wipe, direction:Transition.IN, duration:1, easing:Strong.easeIn, startPoint:2});	}				// changes the description TextField to display the models current description	override protected function changeDescription():void{		trace("changeDescription function called on: " + getQualifiedClassName(this));				connectDescription();				//first wipe out		this.__descriptionHolder.visible = false;		this.__connectMC.visible = false;				//set the text		if(this.__theModel.currentDescription != null){			this.__descriptionTB.text = this.__theModel.currentDescription;		}	}		// connects the index clicked with the description box, by drawing a line	override protected function connectDescription():void{		trace("connectDescription function called on: " + getQualifiedClassName(this));				var linkMC:MovieClip = this.__theModel.links[this.__theModel.currentSectionIndex];				var distanceXToLink:int = (linkMC.x - (this.__descriptionHolder.x + this.__descriptionHolder.width))  + linkMC.width;		var distanceYToLink:int = (linkMC.y + linkMC.height) - this.__descriptionHolder.y;				//map out the projected coordinates for out drawing api		var firstX:int = this.__descriptionHolder.width + ((distanceXToLink / 2) - (this.__connectCornerRadius / 2));		var firstY:int = 0		var secondX:int = firstX + this.__connectCornerRadius;		var secondY:int = this.__connectCornerRadius;		var thirdX:int = secondX;		var thirdY:int = distanceYToLink;		var fourthX:int = thirdX + this.__connectCornerRadius;		var fourthY:int = thirdY + this.__connectCornerRadius;				//begin drawing		this.__connectMC.graphics.clear();		this.__connectMC.graphics.lineStyle(.75, 0xEC2828, 1, true);		this.__connectMC.graphics.lineTo(firstX, firstY);		this.__connectMC.graphics.curveTo(secondX, firstY, secondX, secondY);		this.__connectMC.graphics.lineTo(thirdX, thirdY);		this.__connectMC.graphics.curveTo(thirdX, fourthY, fourthX, fourthY);		this.__connectMC.graphics.lineTo(fourthX + (distanceXToLink / 2), fourthY);			}		// reveals the connect	override public function revealConnect():void{		trace("revealConnect function called on: " + getQualifiedClassName(this));				this.__connectMC.visible = true;		this.__connectTM = new TransitionManager(this.__connectMC);		this.__connectTM.addEventListener("allTransitionsInDone", onConnectRevealed);		this.__connectTM.startTransition({type:Wipe, direction:Transition.IN, duration:.7, easing:Strong.easeIn, startPoint:9});	}		// reveals the description	override protected function revealDescription():void{		trace("revealDescription function called on: " + getQualifiedClassName(this));				//first wipe in		this.__descriptionHolder.visible = true;		this.__descriptionTM = new TransitionManager(this.__descriptionHolder);		this.__descriptionTM.startTransition({type:Wipe, direction:Transition.IN, duration:.7, easing:Strong.easeOut, startPoint:4});	}				//////////////////////////////// EVENTS ///////////////////////////////////////////////////////		override public function onInfoChanged(eventObj:GalleryEvent):void{		trace("onInfoChanged event caught on: " + getQualifiedClassName(this));							if(eventObj.changeType == "sections"){			//SECTIONS			setupLinks();		}else if(eventObj.changeType == "description"){			changeDescription();		}	}		// handles when a section link is clicked	override public function onLinkClicked(eventObj:MouseEvent):void{		trace("onLinkClicked event caught on: " + getQualifiedClassName(this));		//determine if we are already on this section, if not, then allow the click		if(this.__theModel.currentSectionIndex == eventObj.currentTarget.index && this.__theModel.currentSectionType == eventObj.currentTarget.sectionType){		//do nothing		}else if(!this.__theModel.sectionChanging){			dispatchEvent(new ViewEvent(ViewEvent.SECTION_CHANGED, false, false, MovieClip(eventObj.currentTarget)));		}	}		// handles when a NEXT section link is clicked	override public function onNextClicked(eventObj:MouseEvent):void{		trace("onNextClicked event caught on: " + getQualifiedClassName(this));		if(!this.__theModel.sectionChanging){			dispatchEvent(new ViewEvent(ViewEvent.NEXT_SECTION, false, false));		}	}		// handles when a previous section link is clicked	override public function onPrevClicked(eventObj:MouseEvent):void{		trace("onPrevClicked event caught on: " + getQualifiedClassName(this));		if(!this.__theModel.sectionChanging){			dispatchEvent(new ViewEvent(ViewEvent.PREV_SECTION, false, false));		}	}		// handles when a ZOOM link is clicked	override public function onZoomClicked(eventObj:MouseEvent):void{		trace("onZoomClicked event caught on: " + getQualifiedClassName(this));		if(!this.__theModel.sectionChanging){			dispatchEvent(new ViewEvent(ViewEvent.ZOOM_SECTION, false, false));		}	}		// handles when the description is revealed and the Transition is done	override public function onConnectRevealed(eventObj:Event):void{		trace("onConnectRevealed event caught on: " + getQualifiedClassName(this));				revealDescription();	}	}}