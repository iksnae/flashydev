/** * @author k */import com.continuityny.courtyard.views.home.HomeView;import com.continuityny.courtyard.views.home.HomeData;import com.bourre.commands.Delegate; import flash.display.BitmapData;import gs.TweenLite;import flash.geom.*;import mx.transitions.easing.*;class com.continuityny.courtyard.views.home.HomeThumb extends MovieClip  {			private var homeData:HomeData;			private var _bmp:BitmapData;	private var _thumb:MovieClip;	private var _mask:MovieClip;		private var _maxReveal:Number;	private var _currentWidth:Number;	private var _maxWidth:Number=200;	private var _maxX:Number=900;	private var _offset:Number=100;	private var _minWidth:Number=50	private var _id:Number;	private var _myName:String;	private var _currentDepth:Number;		private var _me;	private var _shell:HomeView;			public function HomeThumb(container,bmp,id) {		homeData = HomeData.getInstance();		container.__proto__ = this.__proto__;		container.__constructor__ = HomeThumb;		this = container;		_bmp = bmp;			trace(" -> new thumb clip: "+this+'  '+id);				_mask = this.createEmptyMovieClip("mask", 1);		_thumb = this.createEmptyMovieClip("thumb", 2);				trace('_mask: '+_mask);		trace('_thumb: '+_thumb);				_shell = _global.HomeMuthaFuckinShell;		_myName = id;		_global.setUpCourtYardMaskedThumbs = Delegate.create(this, setup);				}		public function set maxWidth(max:Number){		trace('set maxWidth: '+max);		this._maxWidth=max;			}	public function set maxX(max:Number){		this._maxX=max;	}	public function set offset(offset:Number){		this._offset = offset;	}	public function set minWidth(min:Number){		trace('set minWidth: '+min);		this._minWidth = min;			}	public function disable():Void{		this._thumb.enabled=false;		}	public function enable():Void{		this._thumb.enabled=true;		}	function set id(id){		this._id=id;		_global.setUpCourtYardMaskedThumbs();	}	function get id():Number{		return _id;	}	public function setup(){		trace('setup::::: ' + this._name);		trace(this._bmp);			setupMask(_mask);		setupThumb(_thumb,this._bmp);			}	private function setupMask(targ:MovieClip){		targ.beginFill(0x000000, 100);		targ.moveTo(0,0);		targ.lineTo(100,0);		targ.lineTo(100,400);		targ.lineTo(0,400);		targ.endFill();		trace('setupMask: '+targ);	}	private function setupThumb(targ:MovieClip,bmp){		trace('setupThumb: ' + this._mask+' with ' + this._bmp);		targ.beginBitmapFill(bmp,new Matrix,true,true);		_maxReveal = bmp.width;		trace("_maxReveal="+_maxReveal);		targ.moveTo(0,0);		targ.lineTo(bmp.width, 0);			targ.lineTo(bmp.width, bmp.height);		targ.lineTo(0, bmp.height);						built();	}	private function getMyPage(a){		_shell.changeSections(a);		trace(a);	}	public function expand(){		var newX = ((970/2)-(_maxReveal/2));				_currentWidth = _mask._width;				TweenLite.to(_mask, 1.7, {_width:_maxReveal,_x:newX});		TweenLite.to(_thumb, 1.7, {_x:newX});		_shell.putMeOnTop(this);	}	public function collapse(){		//TweenLite.to(_mask, 1.7, {_width:_currentWidth,onComplete:keepMoving, onCompleteScope:this});			TweenLite.to(_mask, 1.7, {_width:_currentWidth,_x:this.randomX(),onComplete:keepMoving, onCompleteScope:this});		TweenLite.to(_thumb, 1.7, {_x:_offset});					}	public function get currentDepth():Number{		return _currentDepth;		}									private function built(){		_thumb.setMask(_mask);		_mask._x=-200;		_mask._width=0;		_currentDepth = this.getDepth();		_thumb.onRollOver=Delegate.create(this, expand);		_thumb.onRollOut=Delegate.create(this, collapse);		_thumb.onRelease=Delegate.create(this,getMyPage, _myName);						//startMotion();	}	public function startMotion(){		trace(this+'} startMotion')		TweenLite.to(_mask, randomTime(), {_x:randomX(),_width:randomWidth(),onComplete:keepMoving, onCompleteScope:this});	}	private function keepMoving(){		if(_currentDepth!=this.getDepth()){			_shell.putMeBack(this);		}		TweenLite.to(_mask, randomTime(), {_x:randomX(),_width:randomWidth(),onComplete:keepMoving, onCompleteScope:this});	}	private function stopMotion(){			}	private function randomWidth():Number{		return Math.round(Math.random() * this._maxWidth)+(this._minWidth*2);	}	private function randomX():Number{		return Math.round(Math.random() * this._maxX)+50;	}	private function randomTime():Number{		return Math.round(Math.random() *10)+(3);	}	}