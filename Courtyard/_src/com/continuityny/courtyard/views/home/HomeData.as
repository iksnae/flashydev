/** * @author k */import flash.display.BitmapData;import flash.geom.*;class com.continuityny.courtyard.views.home.HomeData extends Object {			private var shell;		private var imageHolder:MovieClip;	private var imageLoader:MovieClipLoader;	private var currentImageNum:Number = 0;		private static var instance:HomeData = null;	private static var allowInstantiation:Boolean = false;		public function HomeData(){		trace("DataObject");	}	private var imageURLS:Array= new Array(											'images/new/lobby.jpg',											'images/new/market.jpg',											'images/new/biz.jpg',											'images/new/room.jpg',											'images/new/fitness.jpg',											'images/new/outdoor.jpg',																						'images/lobby_w_lines.jpg',											'images/market_w_lines.jpg',											'images/biz_w_lines.jpg',											'images/room_w_lines.jpg',											'images/fitness_w_lines.jpg',											'images/outdoorStill.jpg'																					);	public var sections:Array = new Array(											'lobby',											'market',											'business',											'guest_room',											'fitness',											'outdoor'	);	public var bitmaps:Array=new Array();	public var colors:Array=new Array();	public var thumbnailWidths:Array=new Array();			/******************************************************	 * loadImages:	 * --------------------------------------------	 * 	this method initiates the image loading process	 *****************************************************/		public function loadImages():Void{		trace('loading images...\r'+shell);		imageLoader = new MovieClipLoader();		imageLoader.addListener(this);		loadNextImage();		}		/******************************************************	 * loadNextImage:	 * --------------------------------------------	 * 	this method loads the next image from the imageURLs array	 *****************************************************/		private function loadNextImage():Void{		imageHolder = shell.createEmptyMovieClip('imageHolder',777);				imageLoader.loadClip(imageURLS[currentImageNum],imageHolder);		trace('loading image: '+imageURLS[currentImageNum]);		currentImageNum++;	}		/******************************************************	 * onLoadInit:	 * --------------------------------------------	 * 	this method is called when an external image is	 * 	finished loading. it then takes the loaded image	 * 	and converts it to local bitmap data. finally it	 * 	checks to see if all images have been loaded. if 	 * 	all images are not loaded it loads the next image.	 * 	if all images are loaded, it deletes the loader	 * 	clips and set the ReadyToGo property to true and 	 * 	calls build() method.	 *****************************************************/	 	private function onLoadInit():Void{		trace('image loaded.')		var bmp:BitmapData = new BitmapData(imageHolder._width, imageHolder._height, true, 0x00000000);	//	thumbnailWidths.push(bmp.width)		var mtx:Matrix = new Matrix();		bmp.draw(imageHolder,mtx);				bitmaps.push(bmp);				trace("bmp: "+bmp);				if(currentImageNum<imageURLS.length){			loadNextImage();		}else{			trace('all images loaded!');		//	delete imageLoader;		//	imageHolder.removeMovieClip();		imageHolder._alpha=0;			shell.imagesLoaded();		}	}	public static function getInstance() : HomeData {		if ( HomeData.instance == null ) {			HomeData.allowInstantiation = true;			HomeData.instance = new HomeData();			HomeData.allowInstantiation = false;		}			return HomeData.instance;		}	public function setShell(_shell){		shell=_shell;		loadImages();	}}			