/** * @author k */ import flash.display.BitmapData;import gs.TweenLite;import flash.geom.*;import mx.transitions.easing.*;class com.continuityny.courtyard.views.CY_Homey extends MovieClip {		private var imageLoader:MovieClipLoader;	private var imageHolder:MovieClip;	private var currentImageNum:Number=0;	private var imageWidth:Number = 970;	private var imageHeight:Number = 400;	private var sliceCount:Number = 20;	private var sliceWidth:Number=50;	private var timing:Number = 1.7;		private var currentSectionName:String;	private var currentSectionNum:Number;			private var bitmaps:Array = new Array();	private var offsets:Array = new Array(-9,-8,-7,-6,-5,-4,-3,-2,-1,0,1,2,3,4,5,6,7,8,9,10);	private var ReadyToGo:Boolean;		private var imageURLS:Array= new Array(											'images/new/lobby.png',											'images/new/market.png',											'images/new/biz.png',											'images/new/room.png',											'images/new/fitness.png',											'images/new/outdoor.png',																						'images/lobby_w_lines.png',											'images/market_w_lines.png',											'images/biz_w_lines.png',											'images/room_w_lines.png',											'images/fitness_w_lines.png',											'images/outdoorStill.jpg'																					);												private var sections:Array = new Array(											'lobby',											'market',											'business_center',											'guest_room',											'fitness_pool',											'outdoor'	);		private var LobbyNeutral:MovieClip;	private var MarketNeutral:MovieClip;	private var RoomNeutral:MovieClip;	private var BusinessNeutral:MovieClip;	private var FitnessNeutral:MovieClip;	private var OutdoorNeutral:MovieClip;	private var NeutralImageHolder:MovieClip;				private var AllNeutrals:Array=new Array(LobbyNeutral,MarketNeutral,RoomNeutral,BusinessNeutral,FitnessNeutral,OutdoorNeutral);				public function CY_Homey(container) {		//OnChangeLocation = onChangeLocation;		container.__proto__ = this.__proto__;		container.__constructor__ = CY_Homey;		this = container;		init();	}	public function changeSection(id:String):Void{		for(var i in sections){			if(sections[i] == id){				showSlices(i);			}		}	} 		private function init():Void{		loadImages();	}		private function startMotion():Void{	}	private function stopMotion():Void{	}			/******************************************************	 * loadImages:	 * --------------------------------------------	 * 	this method initiates the image loading process	 *****************************************************/		private function loadImages():Void{		trace('loading images...');		imageLoader = new MovieClipLoader();		imageLoader.addListener(this);		loadNextImage();		}		/******************************************************	 * loadNextImage:	 * --------------------------------------------	 * 	this method loads the next image from the imageURLs array	 *****************************************************/		private function loadNextImage():Void{		imageHolder = createEmptyMovieClip('imageOutter', 0);		imageLoader.loadClip(imageURLS[currentImageNum],imageHolder);				trace('loading image: '+imageURLS[currentImageNum]);				currentImageNum++;	}		/******************************************************	 * onLoadInit:	 * --------------------------------------------	 * 	this method is called when an external image is	 * 	finished loading. it then takes the loaded image	 * 	and converts it to local bitmap data. finally it	 * 	checks to see if all images have been loaded. if 	 * 	all images are not loaded it loads the next image.	 * 	if all images are loaded, it deletes the loader	 * 	clips and set the ReadyToGo property to true and 	 * 	calls build() method.	 *****************************************************/	 	private function onLoadInit():Void{		var bmp:BitmapData=new BitmapData(imageHolder._width, imageHolder._height, true, 0x00000000);		bmp.draw(imageHolder);		bitmaps.push(bmp);				if(currentImageNum<imageURLS.length){			loadNextImage();		}else{			trace('all images loaded!');				ReadyToGo=true;			delete imageLoader;			imageHolder.removeMovieClip();			NeutralImageHolder = this.createEmptyMovieClip('neutralImageHolder', 0);			for(var i:Number=0; i<AllNeutrals.length;i++){				AllNeutrals[i] = NeutralImageHolder.createEmptyMovieClip(sections[i], i);				AllNeutrals[i].id=i;				buildSlices(AllNeutrals[i],bitmaps[i+AllNeutrals.length]);			}		}	}	private function buildSlices(mc:MovieClip,bmp:BitmapData):Void {		for(var k:Number=0;k<20;k++){			var imgSlice:MovieClip = mc.createEmptyMovieClip('slice'+k, k);			var newBmp:BitmapData = new BitmapData(sliceWidth,imageHeight,false);			newBmp.copyPixels(bmp,new Rectangle(k*sliceWidth,0,sliceWidth,imageHeight),new Point(0,0));			imgSlice.attachBitmap(newBmp, 0);			imgSlice._x=(k*sliceWidth);			imgSlice.defX=imgSlice._x;			imgSlice.altX=(((offsets[k])*imageWidth)*1.5)-100;		}		hideSlices(mc.id);	}	private function hideSlices(num:Number):Void{		trace("hideSlices: "+num+" :  "+AllNeutrals[num]);		for(var i in AllNeutrals[num]){			TweenLite.to(AllNeutrals[num][i],timing,{_x:AllNeutrals[num][i].altX,ease:Strong.easeOut});			}		}	public function showSlices(num:Number):Void{		if(currentSectionNum!=undefined){			trace("showSlices: "+num+" :  "+AllNeutrals[num]);			hideSlices(currentSectionNum);			currentSectionNum = num;			for(var i in AllNeutrals[num]){				TweenLite.to(AllNeutrals[num][i],timing,{_x:AllNeutrals[num][i].defX,ease:Strong.easeOut,delay:timing*.3});					}		}else{					currentSectionNum = num;			for(var j in AllNeutrals[num]){				TweenLite.to(AllNeutrals[num][j],timing,{_x:AllNeutrals[num][j].defX, ease:Strong.easeOut});				}		}	}}